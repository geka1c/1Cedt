перем  мОстанавливатьПриходПриОшибке экспорт;

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если аСППрверки.НаличиеОстатковНаСкладеДвиж(Покупки)=ложь Тогда	
		Отказ=Истина;
	КонецЕсли;
	Если Отказ  Тогда
		Возврат;
	КонецЕсли;

	
	
	Если ТипДвижения=Перечисления.ТипыДвиженияПокупок.Перемещение Тогда
		Если МестоХранения=Справочники.МестаХранения.ПустаяСсылка() Тогда
			отказ=Истина;
			Сообщить("Необходимо указать место хранения, куда перемещать товар.");
			Возврат;
		КонецЕсли;
		
		Движения.ОстаткиТоваров.Записывать = Истина;
		Для Каждого ТекСтрокаПокупки Из Покупки Цикл
			Движение = Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Габарит = ТекСтрокаПокупки.Габарит;
			Движение.Участник = ТекСтрокаПокупки.Участник;
			Движение.МестоХранения = ТекСтрокаПокупки.МестоХранения;
			
			Движение.Покупка =?(ТекСтрокаПокупки.Код,ТекСтрокаПокупки.Покупка.Код, ТекСтрокаПокупки.Покупка);
		//	Движение.ПокупкаСсылка = ТекСтрокаПокупки.Покупка;

			Движение.Партия = ТекСтрокаПокупки.Партия;
			Движение.Оплачен = ТекСтрокаПокупки.Оплачен;
			Движение.Потерян = ТекСтрокаПокупки.Потерян;
			Движение.Количество = ТекСтрокаПокупки.Количество;
		КонецЦикла;

		// регистр ОстаткиТоваров Приход
		Движения.ОстаткиТоваров.Записывать = Истина;
		Для Каждого ТекСтрокаПокупки Из Покупки Цикл
			Движение = Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Габарит = ?(ЗначениеЗаполнено(Габарит),Габарит,ТекСтрокаПокупки.Габарит );
			Движение.Участник = ТекСтрокаПокупки.Участник;
			Движение.МестоХранения = ?(ЗначениеЗаполнено(МестоХранения),МестоХранения,ТекСтрокаПокупки.МестоХранения );
			Движение.Покупка = ?(ТекСтрокаПокупки.Код,ТекСтрокаПокупки.Покупка.Код, ТекСтрокаПокупки.Покупка);
		//	Движение.ПокупкаСсылка = ТекСтрокаПокупки.Покупка;
			Движение.Партия = ТекСтрокаПокупки.Партия;
			Движение.Оплачен = ТекСтрокаПокупки.Оплачен;
			Движение.Потерян = ТекСтрокаПокупки.Потерян;
			Движение.Количество = ТекСтрокаПокупки.Количество;
		КонецЦикла;
	ИначеЕсли  ТипДвижения=Перечисления.ТипыДвиженияПокупок.Передача Тогда
		Если Организатор=Справочники.Организаторы.ПустаяСсылка() Тогда
			отказ=Истина;
			Сообщить("Необходимо указать организатора, кому передаем товар.");
			Возврат;
		КонецЕсли;

		
		Если НаличиеПотерянных()=Истина Тогда
			Сообщить("Нельзя передать потерянный товар!");
   			Возврат;
		КонецЕсли;
		
		
			
		
		Движения.ОстаткиТоваров.Записывать = Истина;
		Движения.Расход.Записывать = Истина;

	
		Для Каждого ТекСтрока Из Покупки Цикл
			
			Движение 				= Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период 		= Дата;
			Движение.Габарит 	 	= ТекСтрока.Габарит;
			Движение.Участник 		= ТекСтрока.Участник;
			Движение.МестоХранения 	= ТекСтрока.МестоХранения;
			Движение.Покупка 		= ?(ТекСтрока.Код,ТекСтрока.Покупка.Код, ТекСтрока.Покупка);
		//	Движение.ПокупкаСсылка = ТекСтрока.Покупка;
			Движение.Партия			= ТекСтрока.Партия;
			Движение.Оплачен		= ТекСтрока.Оплачен;
			Движение.Потерян        = ТекСтрока.Потерян;
			Движение.Количество 	= ТекСтрока.Количество;
			

		
		
		
		КонецЦикла;
	ИначеЕсли  ТипДвижения=Перечисления.ТипыДвиженияПокупок.ПередачаНаТранзит Тогда
		//Если Организатор=Справочники.Организаторы.ПустаяСсылка() Тогда
		//	отказ=Истина;
		//	Сообщить("Необходимо указать организатора, кому передаем товар.");
		//	Возврат;
		//КонецЕсли;

		
		Если НаличиеПотерянных()=Истина Тогда
			Сообщить("Нельзя передать потерянный товар!");
   			Возврат;
		КонецЕсли;
		
		
			
		
		Движения.ОстаткиТоваров.Записывать = Истина;
		Движения.Расход.Записывать = Истина;
		Движения.Транзит.Записывать = Истина;
	
		Для Каждого ТекСтрока Из Покупки Цикл
			
			Движение 				= Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период 		= Дата;
			Движение.Габарит 	 	= ТекСтрока.Габарит;
			Движение.Участник 		= ТекСтрока.Участник;
			Движение.МестоХранения 	= ТекСтрока.МестоХранения;
			Движение.Покупка 		= ?(ТекСтрока.Код,ТекСтрока.Покупка.Код, ТекСтрока.Покупка);
			Движение.Партия			= ТекСтрока.Партия;
			Движение.Оплачен		= ТекСтрока.Оплачен;
			Движение.Потерян        = ТекСтрока.Потерян;
			Движение.Количество 	= ТекСтрока.Количество;
		КонецЦикла;	
		
		Для Каждого ТекСтрока Из Покупки Цикл
			Если ТипЗнч(ТекСтрока.Покупка)= Тип("СправочникСсылка.Посылки") и
				 Комментарий = "Передано на курьерскую доставку" Тогда
				//Для каждого стр_покупка из ТекСтрока.Покупка.Состав Цикл
					Движение 				= Движения.Транзит.Добавить();
					Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
					Движение.Период 		= Дата;
					Движение.Габарит 	 	= ?(ЗначениеЗаполнено(Габарит),Габарит,ТекСтрока.Габарит);
					Движение.Участник 		= ТекСтрока.Участник;
					Движение.МестоХранения 	= ?(ЗначениеЗаполнено(Габарит),МестоХранения,ТекСтрока.МестоХранения);
					Движение.ПокупкаСсылка	= ТекСтрока.Покупка.Покупка;
					Движение.Партия			= ТекСтрока.Партия;
					Движение.Количество 	= ТекСтрока.Количество;
					Движение.Точка			= ТочкаНазначения;
				//КонецЦикла;	
			Иначе	 
				Движение 				= Движения.Транзит.Добавить();
				Движение.ВидДвижения 	= ВидДвиженияНакопления.Приход;
				Движение.Период 		= Дата;
				Движение.Габарит 	 	= ?(ЗначениеЗаполнено(Габарит),Габарит,ТекСтрока.Габарит);
				Движение.Участник 		= ТекСтрока.Участник;
				Движение.МестоХранения 	= ?(ЗначениеЗаполнено(Габарит),МестоХранения,ТекСтрока.МестоХранения);
				Движение.ПокупкаСсылка	= ТекСтрока.Покупка;
				Движение.Партия			= ТекСтрока.Партия;
				Движение.Количество 	= ТекСтрока.Количество;
				Движение.Точка			= ТочкаНазначения;
			КонецЕсли;
			
		
		КонецЦикла;
		
		
	ИначеЕсли  ТипДвижения=Перечисления.ТипыДвиженияПокупок.Возврат Тогда
		Если НаличиеПотерянных()=Истина Тогда
			Сообщить("Нельзя вернуть потерянный товар!");
   			Возврат;
		КонецЕсли;
		
		
			
		
		Движения.ОстаткиТоваров.Записывать = Истина;

	
		Для Каждого ТекСтрока Из Покупки Цикл
			
			Движение 				= Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период 		= Дата;
			Движение.Габарит 	 	= ТекСтрока.Габарит;
			Движение.Участник 		= ТекСтрока.Участник;
			Движение.МестоХранения 	= ТекСтрока.МестоХранения;
			Движение.Покупка 		= ?(ТекСтрока.Код,ТекСтрока.Покупка.Код, ТекСтрока.Покупка);;
		//	Движение.ПокупкаСсылка = ТекСтрока.Покупка;
			Движение.Партия			= ТекСтрока.Партия;
			Движение.Оплачен		= ТекСтрока.Оплачен;
			Движение.Потерян        = ТекСтрока.Потерян;
			Движение.Количество 	= ТекСтрока.Количество;
			
		
		
		КонецЦикла;
		
		
	ИначеЕсли  ТипДвижения=Перечисления.ТипыДвиженияПокупок.Найденные Тогда
		Если МестоХранения=Справочники.МестаХранения.ПустаяСсылка() Тогда
			отказ=Истина;
			Сообщить("Необходимо указать место хранения, куда возвращать товар.");
			Возврат;
		КонецЕсли;
		
		Если НаличиеНеПотерянных()=Истина Тогда
			Сообщить("Необходимо чтобы в табличной части были только потерянные покупки!");
   			Возврат;
		КонецЕсли;
		Движения.ОстаткиТоваров.Записывать = Истина;
		Для Каждого ТекСтрокаПокупки Из Покупки Цикл
			Движение = Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Габарит = ТекСтрокаПокупки.Габарит;
			Движение.Участник = ТекСтрокаПокупки.Участник;
			Движение.МестоХранения = ТекСтрокаПокупки.МестоХранения;
			Движение.Покупка = ?(ТекСтрокаПокупки.Код,ТекСтрокаПокупки.Покупка.Код, ТекСтрокаПокупки.Покупка);;
			//Движение.ПокупкаСсылка = ТекСтрокаПокупки.Покупка;
			Движение.Партия = ТекСтрокаПокупки.Партия;
			Движение.Оплачен = ТекСтрокаПокупки.Оплачен;
			Движение.Потерян = ТекСтрокаПокупки.Потерян;
			Движение.Количество = ТекСтрокаПокупки.Количество;
		КонецЦикла;

		// регистр ОстаткиТоваров Приход
		Движения.ОстаткиТоваров.Записывать = Истина;
		Для Каждого ТекСтрокаПокупки Из Покупки Цикл
			Движение = Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Габарит = ТекСтрокаПокупки.Габарит;
			Движение.Участник = ТекСтрокаПокупки.Участник;
			Движение.МестоХранения = МестоХранения;
			Движение.Покупка = ?(ТекСтрокаПокупки.Код,ТекСтрокаПокупки.Покупка.Код, ТекСтрокаПокупки.Покупка);
		//	Движение.ПокупкаСсылка = ТекСтрокаПокупки.Покупка;
			Движение.Партия = Ссылка;
			Движение.Оплачен = ТекСтрокаПокупки.Оплачен;
			Движение.Потерян = ложь;
			Движение.Количество = ТекСтрокаПокупки.Количество;
		КонецЦикла;		
		
		
		

	ИначеЕсли  ТипДвижения=Перечисления.ТипыДвиженияПокупок.Списание Тогда
		Движения.ОстаткиТоваров.Записывать = Истина;
		Движения.Расход.Записывать = Истина;
		Для Каждого ТекСтрокаПокупки Из Покупки Цикл
			Движение = Движения.ОстаткиТоваров.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Габарит = ТекСтрокаПокупки.Габарит;
			Движение.Участник = ТекСтрокаПокупки.Участник;
			Движение.МестоХранения = ТекСтрокаПокупки.МестоХранения;
			Движение.Покупка = ТекСтрокаПокупки.Покупка;
		//	Движение.ПокупкаСсылка = ?(ТекСтрокаПокупки.Код,ТекСтрокаПокупки.Покупка.Код, ТекСтрокаПокупки.Покупка);
			Движение.Партия = ТекСтрокаПокупки.Партия;
			Движение.Оплачен = ТекСтрокаПокупки.Оплачен;
			Движение.Потерян = ТекСтрокаПокупки.Потерян;
			Движение.Количество = ТекСтрокаПокупки.Количество;
			
			

			Движение 				= Движения.Расход.Добавить();
			Движение.Период 		= Дата;
			Движение.Габарит 	 	= ТекСтрокаПокупки.Габарит;
			Движение.Участник 		= ТекСтрокаПокупки.Участник;
			Движение.Списано		= Истина;
			Движение.ТипРасхода		= Перечисления.ТипРасхода.Списано;
			Движение.Покупка 		= ТекСтрокаПокупки.Покупка;
			Движение.Количество 	= ТекСтрокаПокупки.Количество;
			Движение.Сумма			= 0;	    		
	
			
		КонецЦикла;
		
	ИначеЕсли ТипДвижения=Перечисления.ТипыДвиженияПокупок.СписаниеТранзита Тогда
		
		Для Каждого ТекСтрокаПокупки Из ПокупкиТранзит Цикл
			Движения.Транзит.Записывать= Истина;
			Движения.Расход.Записывать = Истина;
			
			Движение = Движения.Транзит.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,ТекСтрокаПокупки);
			Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
			Движение.Период 		= Дата;
			Движение.ПокупкаСсылка 	= ТекСтрокаПокупки.Покупка;
			//Движение.Габарит 		= ТекСтрокаПокупки.Габарит;
			//Движение.МестоХранения 	= ТекСтрокаПокупки.МестоХранения;
			//Движение.Партия 		= ТекСтрокаПокупки.Партия;
			//Движение.Участник		= ТекСтрокаПокупки.Участник;
			//Движение.Точка 			= ТекСтрокаПокупки.Точка;
			Движение.Количество 	= ТекСтрокаПокупки.КоличествоМест;
			
			
			Движение 				= Движения.Расход.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,ТекСтрокаПокупки);
			Движение.Период 		= Дата;
			Движение.Участник 		= ТекСтрокаПокупки.Точка;
			Движение.Списано		= Истина;
			Движение.ТипРасхода		= Перечисления.ТипРасхода.Транзит;
			Движение.Покупка		= ТекСтрокаПокупки.Покупка;
			Движение.Количество 	= ТекСтрокаПокупки.КоличествоМест;
			Движение.Сумма			= 0;
			
			//Движение.Габарит 	 	= ТекСтрокаПокупки.Габарит;
			//Движение.Покупка 		= ТекСтрокаПокупки.Покупка;
			//ТекСтрокаПокупки.Количество;
				    		
		КонецЦикла;
		ДвиженияСтатусыДоставки(Отказ, Режим);
		
		

	КонецЕсли;
КонецПроцедуры



Функция НаличиеНеПотерянных()
	Для Каждого ТекСтрокаПокупки Из Покупки Цикл
		Если  ТекСтрокаПокупки.Потерян=Ложь Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ложь;	
КонецФункции // ПроверкаПотерянных()

Функция НаличиеПотерянных()
	Для Каждого ТекСтрокаПокупки Из Покупки Цикл
		Если  ТекСтрокаПокупки.Потерян=Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ложь;	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	мОстанавливатьПриходПриОшибке=Константы.ОстанавливатьПриходПриОшибке.Получить();
КонецПроцедуры


Процедура ДвиженияСтатусыДоставки(Отказ, Режим)
	Движения.СтатусыДоставки.Записывать = Истина;
	Для Каждого ТекСтрокаПокупки Из ПокупкиТранзит Цикл
		Если типзнч(ТекСтрокаПокупки.Покупка)<>Тип("СправочникСсылка.Коробки")  Тогда продолжить КонецЕсли;
		Движение = Движения.СтатусыДоставки.Добавить();
		Движение.Период = Дата;
		Движение.Груз = ТекСтрокаПокупки.Покупка;
		Движение.Статус = Перечисления.СтатусыОтправкиГруза.Утрачен;
	КонецЦикла;
КонецПроцедуры


Процедура ЗаполнитьПоОтборуТовары(Параметры) Экспорт
	
	Схема	= ПолучитьМакет("СКДОтборТовары");
	КомпоновщикНастроек		= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.ВариантыНастроек["Основной"].Настройки);
	
	настройки=КомпоновщикНастроек.Настройки;
	
	Для Каждого Элем из Параметры Цикл
		Если ТипЗнч(элем.Значение) 	<> Тип("Структура") Тогда Продолжить; КонецЕсли;
		полеОтбора		= КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(Элем.Ключ);
		Если ПолеОтбора = Неопределено Тогда Продолжить; КонецЕсли;
		
		НовыйОтбор 					= настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение	= полеОтбора.Поле;
		ЗаполнитьЗначенияСвойств(НовыйОтбор, элем.Значение);
	КонецЦикла;
	
	
	параметрПериод					= настройки.ПараметрыДанных.НайтиЗначениеПараметра(новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	параметрПериод.Значение			= КонецДня(Параметры.ДатаОтчета);
	параметрПериод.Использование	= Истина;
	
	КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(настройки);
	
	КомпановщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет	=	КомпановщикМакета.Выполнить(Схема,КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки= новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорВывода=новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ=новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	Если   ТипДвижения  =Перечисления.ТипыДвиженияПокупок.СписаниеТранзита  или
		   ТипДвижения  =Перечисления.ТипыДвиженияПокупок.СТранзитаНаВозврат или
		   ТипДвижения  =Перечисления.ТипыДвиженияПокупок.СТранзитаНаОстатки Тогда
		ПокупкиТранзит.Загрузить(ТЗ);
	Иначе
		Покупки.Загрузить(ТЗ);
	КонецЕсли		
КонецПроцедуры	