
#Область Проведение

Процедура ОбработкаПроведения(Отказ, Режим)
	Документы.ВыдачаТранзита.ПроверитьНаличие(ЭтотОбъект,Отказ);
	Если Отказ  Тогда Возврат; КонецЕсли;
	
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	Документы.ВыдачаТранзита.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СП_ДвиженияСервер.ОтразитьТранзит(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("СобранныеЗаказы", ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьУпакованныеЗаказы(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьРасход(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьДвиженияПоРегистру("Обмен100СПрн", ДополнительныеСвойства, Движения, Отказ);


//	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен_РН(ДополнительныеСвойства, Движения, Отказ);

	#КонецОбласти
	
	установитьСтатусКурьерскойДоставки(Перечисления.СтатусыДоставки.Отправлен);
	//ДвиженияСпОбмен(Отказ, Режим);
	УстановитьВыдачуВГруппуДоставки(Отказ);
	
	
	Если не ПоОбмену Тогда
		ДвиженияСтатусыДоставки(Отказ, Режим);
		ДвиженияСтатусыДоставкиСвернуто(Отказ, Режим);
		ДвиженияСтатусыЗаявокВТК(Отказ, Режим) ;
		
	ИначеЕсли ТочкаОтправитель<>Константы.СвояТочка.Получить() Тогда	
		Движения.КПолучению.Записывать = Истина;
		Для Каждого ТекСтрокаПокупки Из Покупки Цикл
			
			Движение = Движения.КПолучению.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Покупка = ТекСтрокаПокупки.Покупка;
			Движение.Участник	=ТекСтрокаПокупки.Участник;
			Движение.ДокументВыдачи = Ссылка;
			Движение.Количество = ?(ТипЗнч(ТекСтрокаПокупки.Покупка)=Тип("СправочникСсылка.Коробки"),1,ТекСтрокаПокупки.Количество)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура ДвиженияСтатусыДоставки(Отказ, Режим)
	Движения.СтатусыДоставки.Записывать = Истина;
	Для Каждого ТекСтрокаПокупки Из Покупки Цикл
		Если типзнч(ТекСтрокаПокупки.Покупка)<>Тип("СправочникСсылка.Коробки") или не ТекСтрокаПокупки.Подбор Тогда продолжить КонецЕсли;
		Движение = Движения.СтатусыДоставки.Добавить();
		Движение.Период = Дата;
		Движение.Груз = ТекСтрокаПокупки.Покупка;
		Движение.Статус = Перечисления.СтатусыОтправкиГруза.ВыехалСТочки;
	КонецЦикла;
КонецПроцедуры


Процедура ДвиженияСтатусыДоставкиСвернуто(Отказ, Режим)
	Движения.СтатусыДоставкиСвернуто.Записывать = Истина;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаПокупки.Заявка как ЗаявкаВТК,
		|	СУММА(ВыдачаТранзитаПокупки.КоличествоМест) КАК КоличествоГС,
		|	СУММА(ВыдачаТранзитаПокупки.Количество) КАК Количество,
		|	ВыдачаТранзитаПокупки.Заявка.КоличествоМест КАК КоличествоМест,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтправкиГруза.ВыехалСТочки) КАК Статус,
		|	ВыдачаТранзитаПокупки.Ссылка.Дата КАК Период
		|ИЗ
		|	Документ.ВыдачаТранзита.Покупки КАК ВыдачаТранзитаПокупки
		|ГДЕ
		|	ВыдачаТранзитаПокупки.Подбор
		|	И ВыдачаТранзитаПокупки.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыдачаТранзитаПокупки.Заявка,
		|	ВыдачаТранзитаПокупки.Заявка.КоличествоМест,
		|	ВыдачаТранзитаПокупки.Ссылка.Дата";
	Запрос.Параметры.Вставить("Ссылка",Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Движения.СтатусыДоставкиСвернуто.Загрузить(РезультатЗапроса.Выгрузить());

	
КонецПроцедуры


Процедура ДвиженияСтатусыЗаявокВТК(Отказ, Режим)
	Движения.СтатусыЗаявокВТК.Записывать = Истина;
	Для каждого стр Из ЗаявкиВТК Цикл
		Если не ЗначениеЗаполнено(стр.Заявка) Тогда продолжить; КонецЕсли;
		Движение = Движения.СтатусыЗаявокВТК.Добавить();
		Движение.Период = Дата;
		Движение.Заявка= стр.Заявка;
		Движение.Статус = Перечисления.СтатусыОтправкиГруза.ВыехалСТочки;
	КонецЦикла;
КонецПроцедуры


#КонецОбласти


#Область СобытияОбъекта
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ПоОбмену Тогда
		НеПроверять="Покупки.МестоХранения";	
		инд=ПроверяемыеРеквизиты.Найти(НеПроверять);
		Если инд<>Неопределено Тогда ПроверяемыеРеквизиты.Удалить(инд); КонецЕсли;
		
		НеПроверять="Покупки.Габарит";	
		инд=ПроверяемыеРеквизиты.Найти(НеПроверять);
		Если инд<>Неопределено Тогда ПроверяемыеРеквизиты.Удалить(инд); КонецЕсли;
	КонецЕсли;	
	
	
	Если ВидОперации=Перечисления.ВидыОперацийВыдачаТранзита.НаНесколькоТочек Тогда
		НеПроверять="ТочкаНазначения";	
		инд=ПроверяемыеРеквизиты.Найти(НеПроверять);
		Если инд<>Неопределено Тогда ПроверяемыеРеквизиты.Удалить(инд); КонецЕсли;
	Иначе
		НеПроверять="Покупки.ТочкаНазначения";	
		инд=ПроверяемыеРеквизиты.Найти(НеПроверять);
		Если инд<>Неопределено Тогда ПроверяемыеРеквизиты.Удалить(инд); КонецЕсли;
	КонецЕсли;	
	Если не КонтролироватьСупергруппы Тогда
		НеПроверять="Супергруппа";	
		инд=ПроверяемыеРеквизиты.Найти(НеПроверять);
		Если инд<>Неопределено Тогда ПроверяемыеРеквизиты.Удалить(инд); КонецЕсли;
	КонецЕсли;		
	
	МассПомеченныхСтрок=Покупки.НайтиСтроки(новый Структура("Подбор",Истина));
	Если МассПомеченныхСтрок.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана ни одна строка в документе",,,,Отказ);
	КонецЕсли;

	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если не ПоОбмену и не РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения Тогда
		ЗаполнитьШК();
		СПКонтрольДоставкиГрузов.ЗаполнитьЗаявкиПоКоробкам(ЭтотОбъект,"Покупки","Покупка");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыдачаТранзитаЗаявкиВТК.Заявка,
		|	ВыдачаТранзитаЗаявкиВТК.Ссылка
		|ИЗ
		|	Документ.ВыдачаТранзита.ЗаявкиВТК КАК ВыдачаТранзитаЗаявкиВТК
		|ГДЕ
		|	ВыдачаТранзитаЗаявкиВТК.Ссылка <> &Ссылка
		|	И ВыдачаТранзитаЗаявкиВТК.Заявка В(&СписокЗаявок)
		|	И ВыдачаТранзитаЗаявкиВТК.Ссылка.Проведен
		|	И ВыдачаТранзитаЗаявкиВТК.Заявка <> ЗНАЧЕНИЕ(Документ.ЗаявкаВТранспортнуюКомпанию.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("СписокЗаявок", ЗаявкиВТК.ВыгрузитьКолонку("Заявка"));
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка "+ВыборкаДетальныеЗаписи.Заявка+" уже отправлена доокументом "+ВыборкаДетальныеЗаписи.ссылка,,,,Отказ); 
		КонецЦикла;
		Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
			НеПомеченныеСтроки=Покупки.НайтиСтроки(Новый Структура("Подбор",ложь));
			Для каждого стр из НеПомеченныеСтроки Цикл
				Покупки.Удалить(стр);
			КонецЦикла
		Конецесли;
		
		
		
	КонецЕсли;

	НеЗаполненоеКоличествоМест=Покупки.НайтиСтроки(новый Структура("КоличествоМест",0));
	Для каждого стр из НеЗаполненоеКоличествоМест Цикл
		стр.КоличествоМест=?(ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Коробки"),1,стр.Количество);			
	КонецЦикла;	
	
	
КонецПроцедуры

#КонецОбласти


Процедура ЗаполнитьШК() Экспорт
	Для каждого стр из Покупки Цикл
		Если ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Коробки") и 
			(стр.Покупка.ВидСтикера=Перечисления.ВидыСтикеров.ГруппаДоставки или
			стр.Покупка.ВидСтикера=Перечисления.ВидыСтикеров.ЗаказТК) Тогда 
			стр.ШК			= Справочники.Мегаордера.нулевой;			  
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Мегаордера") Тогда 
			стр.ШК			= стр.Покупка;
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.СобранныеЗаказы") Тогда 
			//стр.ШК			= стр.Покупка;			  
		Иначе
			
			стр.ШК			= СП_Штрихкоды.ПолучитьМегаордер(стр.Покупка,стр.Участник,?(ЗначениеЗаполнено(стр.ТочкаНазначения),стр.ТочкаНазначения,ТочкаНазначения));
		КонецЕсли;
	КонецЦикла	
	
КонецПроцедуры	


#Область ЗаполнениеОстатками


Процедура ЗаполнитьПоСпискуКоробок(СписокКоробок) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранзитОстатки.ПокупкаСсылка КАК покупка,
		|	ТранзитОстатки.МестоХранения КАК МестоХранения,
		|	ТранзитОстатки.Габарит КАК Габарит,
		|	ТранзитОстатки.КоличествоОстаток КАК КоличествоМест,
		|	РАЗНОСТЬДАТ(ТранзитОстатки.Партия.Дата, &ДатаДокумента, ДЕНЬ) КАК ВремяХранения,
		|	ВЫБОР
		|		КОГДА ТранзитОстатки.ПокупкаСсылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки) и ТранзитОстатки.ПокупкаСсылка.ОтправлениеТранзита.ТочкаНазначения=&ТочкаНазначения
		|			ТОГДА ТранзитОстатки.ПокупкаСсылка.ОтправлениеТранзита.СтоимостьДоставки
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РАЗНОСТЬДАТ(ТранзитОстатки.Партия.Дата, &ДатаДокумента, ДЕНЬ) <= ТранзитОстатки.Габарит.ДниХранения
		|					ТОГДА ТранзитОстатки.Габарит.СтоимостьХранения
		|				ИНАЧЕ ТранзитОстатки.Габарит.СтоимостьХранения + ТранзитОстатки.Габарит.ДобавочнаяСтоимость * (РАЗНОСТЬДАТ(ТранзитОстатки.Партия.Дата, &ДатаДокумента, ДЕНЬ) - ТранзитОстатки.Габарит.ДниХранения)
		|			КОНЕЦ
		|	КОНЕЦ КАК СтоимостьХранения,
		|	ТранзитОстатки.Партия КАК Партия,
		|	ТранзитОстатки.Участник КАК Участник,
		|	&Подбор КАК Подбор,
		|	ТранзитОстатки.КоличествоОстаток * ТранзитОстатки.ПокупкаСсылка.Количество КАК Количество,
		|	ТранзитОстатки.Точка КАК ТочкаНазначения,
		|	ВЫБОР
		|		КОГДА ТранзитОстатки.ПокупкаСсылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки) и  ТранзитОстатки.ПокупкаСсылка.ОтправлениеТранзита.ТочкаНазначения=&ТочкаНазначения
		|			ТОГДА ТранзитОстатки.ПокупкаСсылка.ОтправлениеТранзита.ТарифПВнп
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтоимостьДоставки
		|ПОМЕСТИТЬ пред
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки(, ПокупкаСсылка В (&СписокКоробок)) КАК ТранзитОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	пред.покупка КАК покупка,
		|	пред.МестоХранения КАК МестоХранения,
		|	пред.Габарит КАК Габарит,
		|	пред.КоличествоМест КАК КоличествоМест,
		|	пред.ВремяХранения КАК ВремяХранения,
		|	пред.СтоимостьХранения КАК СтоимостьХранения,
		|	пред.Партия КАК Партия,
		|	пред.Участник КАК Участник,
		|	пред.Подбор КАК Подбор,
		|	пред.Количество КАК Количество,
		|	пред.ТочкаНазначения КАК ТочкаНазначения,
		|	пред.СтоимостьДоставки КАК СтоимостьДоставки,
		|	пред.СтоимостьДоставки + пред.СтоимостьХранения КАК СтоимостьИтого
		|ИЗ
		|	пред КАК пред";
	
	Запрос.УстановитьПараметр("Подбор", Константы.ПомечатьЗаказыПриФормированииДокументаВыдачаТранзита.Получить());
	Запрос.УстановитьПараметр("ТочкаНазначения", СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0100"));
	Запрос.УстановитьПараметр("СписокКоробок", СписокКоробок);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	ВидОперации=Перечисления.ВидыОперацийВыдачаТранзита.НаНесколькоТочек;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Покупки.Загрузить(РезультатЗапроса.Выгрузить());
	ЗаполнитьШК();
КонецПроцедуры	

Процедура ЗаполнитьПоСпискуЗаявок(СписокЗаявок) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаВТранспортнуюКомпаниюЗаказы.Груз,
		|	ЗаявкаВТранспортнуюКомпаниюЗаказы.Ссылка
		|ПОМЕСТИТЬ СписокКоробокПоЗаявкам
		|ИЗ
		|	Документ.ЗаявкаВТранспортнуюКомпанию.Заказы КАК ЗаявкаВТранспортнуюКомпаниюЗаказы
		|ГДЕ
		|	ЗаявкаВТранспортнуюКомпаниюЗаказы.Ссылка В(&СписокЗаявок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТранзитОстатки.ПокупкаСсылка КАК покупка,
		|	ТранзитОстатки.МестоХранения,
		|	ТранзитОстатки.Габарит,
		|	ТранзитОстатки.КоличествоОстаток КАК КоличествоМест,
		|	РАЗНОСТЬДАТ(ТранзитОстатки.Партия.Дата, &ДатаДокумента, ДЕНЬ) КАК ВремяХранения,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ТранзитОстатки.Партия.Дата, &ДатаДокумента, ДЕНЬ) <= ТранзитОстатки.Габарит.ДниХранения
		|			ТОГДА ТранзитОстатки.Габарит.СтоимостьХранения
		|		ИНАЧЕ ТранзитОстатки.Габарит.СтоимостьХранения + ТранзитОстатки.Габарит.ДобавочнаяСтоимость * (РАЗНОСТЬДАТ(ТранзитОстатки.Партия.Дата, &ДатаДокумента, ДЕНЬ) - ТранзитОстатки.Габарит.ДниХранения)
		|	КОНЕЦ КАК СтоимостьХранения,
		|	ТранзитОстатки.Партия,
		|	ТранзитОстатки.Участник,
		|	&Подбор,
		|	ТранзитОстатки.КоличествоОстаток * ТранзитОстатки.ПокупкаСсылка.Количество КАК Количество,
		|	ТранзитОстатки.Точка КАК ТочкаНазначения,
		|	СписокКоробокПоЗаявкам.Ссылка КАК Заявка
		|ИЗ
		|	СписокКоробокПоЗаявкам КАК СписокКоробокПоЗаявкам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Транзит.Остатки(
		|				,
		|				ПокупкаСсылка В
		|					(ВЫБРАТЬ
		|						СписокКоробокПоЗаявкам.Груз
		|					ИЗ
		|						СписокКоробокПоЗаявкам КАК СписокКоробокПоЗаявкам)) КАК ТранзитОстатки
		|		ПО СписокКоробокПоЗаявкам.Груз = ТранзитОстатки.ПокупкаСсылка
		|ГДЕ
		|	ТранзитОстатки.ПокупкаСсылка ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Подбор", Константы.ПомечатьЗаказыПриФормированииДокументаВыдачаТранзита.Получить());
	Запрос.УстановитьПараметр("СписокЗаявок", СписокЗаявок);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	ВидОперации=Перечисления.ВидыОперацийВыдачаТранзита.НаНесколькоТочек;
	РезультатЗапроса = Запрос.Выполнить();
	тз=РезультатЗапроса.Выгрузить();
	Покупки.Загрузить(тз);	
	тз.Свернуть("Заявка");
	ЗаявкиВТК.Загрузить(ТЗ);
	ЗаполнитьШК();
КонецПроцедуры	

Процедура ЗаполнитьПоТочкеНазначения(ОчиститьПокупки=Истина)   Экспорт
	Если ТочкаНазначения.ТранспортнаяКомпания Тогда Возврат; КонецЕсли;
	Дата=ТекущаяДата();
	ВидОперации		= Перечисления.ВидыОперацийВыдачаТранзита.НаОднуТочку;
	
	Если ОчиститьПокупки Тогда
		Покупки.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Подбор КАК Подбор,
		|	ТранзитОстатки.Габарит КАК Габарит,
		|	ТранзитОстатки.Участник КАК Участник,
		|	ТранзитОстатки.МестоХранения КАК МестоХранения,
		|	ТранзитОстатки.Партия КАК Партия,
		|	ТранзитОстатки.ПокупкаСсылка КАК ПокупкаСсылка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ТранзитОстатки.ПокупкаСсылка) = ТИП(Справочник.Коробки)
		|			ТОГДА ТранзитОстатки.ПокупкаСсылка.Количество * ТранзитОстатки.КоличествоОстаток
		|		ИНАЧЕ ТранзитОстатки.КоличествоОстаток
		|	КОНЕЦ КАК КоличествоОстаток,
		|	ТранзитОстатки.КоличествоОстаток КАК КоличествоМест,
		|	ЛОЖЬ КАК Упакован
		|ПОМЕСТИТЬ Сбор
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки(&ДатаДокумента, Точка = &Точка
		|	И не МестоХранения.БуфенаяЗона) КАК ТранзитОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА,
		|	УпакованныеЗаказыОстатки.Габарит,
		|	УпакованныеЗаказыОстатки.Участник,
		|	УпакованныеЗаказыОстатки.МестоХранения,
		|	УпакованныеЗаказыОстатки.Партия,
		|	УпакованныеЗаказыОстатки.Покупка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(УпакованныеЗаказыОстатки.Покупка) = ТИП(Справочник.Коробки)
		|		ИЛИ ТИПЗНАЧЕНИЯ(УпакованныеЗаказыОстатки.Покупка) = ТИП(Справочник.Мегаордера)
		|			ТОГДА УпакованныеЗаказыОстатки.Покупка.Количество * УпакованныеЗаказыОстатки.КоличествоОстаток
		|		ИНАЧЕ УпакованныеЗаказыОстатки.КоличествоОстаток
		|	КОНЕЦ,
		|	УпакованныеЗаказыОстатки.КоличествоОстаток,
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.УпакованныеЗаказы.Остатки(&ДатаДокумента, Точка = &Точка
		|	И не МестоХранения.БуфенаяЗона) КАК УпакованныеЗаказыОстатки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сбор.Подбор КАК Подбор,
		|	Сбор.Габарит КАК Габарит,
		|	Сбор.Участник КАК Участник,
		|	Сбор.МестоХранения КАК МестоХранения,
		|	Сбор.Партия КАК Партия,
		|	Сбор.ПокупкаСсылка КАК ПокупкаСсылка,
		|	Сбор.КоличествоОстаток КАК КоличествоОстаток,
		|	ЕСТЬNULL(НегабаритЗначения.Вес, 0) КАК Вес,
		|	ЕСТЬNULL(НегабаритЗначения.объем, 0) КАК Объем,
		|	ВЫРАЗИТЬ(МАКСИМУМ(Мегаордера.Ссылка) КАК Справочник.Мегаордера) КАК ШК,
		|	Сбор.КоличествоМест КАК КоличествоМест,
		|	Сбор.Упакован КАК Упакован
		|ПОМЕСТИТЬ пред
		|ИЗ
		|	Сбор КАК Сбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НегабаритЗначения КАК НегабаритЗначения
		|		ПО Сбор.Партия = НегабаритЗначения.Регистратор
		|		И Сбор.ПокупкаСсылка = НегабаритЗначения.Покупка
		|		И Сбор.Участник = НегабаритЗначения.Участник
		|		И Сбор.Габарит = НегабаритЗначения.Габарит
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мегаордера КАК Мегаордера
		|		ПО Сбор.ПокупкаСсылка = Мегаордера.Покупка
		|		И (ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Сбор.ПокупкаСсылка) <> ТИП(Справочник.Посылки)
		|				ТОГДА Сбор.Участник = Мегаордера.Участник
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)
		|СГРУППИРОВАТЬ ПО
		|	Сбор.Подбор,
		|	Сбор.Габарит,
		|	Сбор.Участник,
		|	Сбор.МестоХранения,
		|	Сбор.Партия,
		|	Сбор.ПокупкаСсылка,
		|	Сбор.КоличествоОстаток,
		|	Сбор.КоличествоМест,
		|	Сбор.Упакован,
		|	ЕСТЬNULL(НегабаритЗначения.Вес, 0),
		|	ЕСТЬNULL(НегабаритЗначения.объем, 0)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	пред.Подбор КАК Подбор,
		|	пред.Габарит КАК Габарит,
		|	пред.Участник КАК Участник,
		|	пред.МестоХранения КАК МестоХранения,
		|	пред.Партия КАК Партия,
		|	пред.ПокупкаСсылка КАК Покупка,
		|	пред.КоличествоОстаток КАК Количество,
		|	пред.Вес КАК Вес,
		|	пред.Объем КАК Объем,
		|	пред.ШК КАК ШК,
		|	пред.КоличествоМест КАК КоличествоМест,
		|	пред.Упакован КАК Упакован
		|ИЗ
		|	пред КАК пред
		|ГДЕ
		|	пред.КоличествоОстаток > 0
		|	И пред.Партия.Дата < &ОграничениеВыдачи";

	Запрос.УстановитьПараметр("Точка", 				ТочкаНазначения);
	Запрос.УстановитьПараметр("ОграничениеВыдачи", 	ОграничениеВыдачи);
	Запрос.УстановитьПараметр("ДатаДокумента", 		Дата+1);
	Запрос.УстановитьПараметр("Подбор", 			Константы.ПомечатьЗаказыПриФормированииДокументаВыдачаТранзита.Получить());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрПокупки=Покупки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрПокупки,ВыборкаДетальныеЗаписи);
		структура_Стоимости = СП_РаботаСДокументами.ПолучитьСтоимостьХранения(ВыборкаДетальныеЗаписи,Дата);
		СтрПокупки.ВремяХранения     	= структура_Стоимости.ВремяХранения;
		СтрПокупки.СтоимостьХранения 	= структура_Стоимости.СтоимостьХранения;
		СтрПокупки.ТочкаНазначения		= ТочкаНазначения;
		СтрПокупки.СтоимостьИтого		= СтрПокупки.СтоимостьХранения+СтрПокупки.СтоимостьДоставки;
	КонецЦикла;
	ЗаполнитьШК();
КонецПроцедуры 

Процедура ЗаполнитьЗаказамиКурьерскойДоставки() Экспорт
	ВидОперации		= Перечисления.ВидыОперацийВыдачаТранзита.НаОднуТочку;
	ТочкаНазначения	= Константы.ПунктВыдачиКурьерскойДоставки.Получить();
	ТочкаТранзита	= ТочкаНазначения;
	Дата			= ТекущаяДата();

	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Подбор КАК Подбор,
		|	СобранныеЗаказыОстатки.Заказ как Покупка,
		|	СобранныеЗаказыОстатки.Заказ.ШК как ШК,
		|	СобранныеЗаказыОстатки.Партия,
		|	СобранныеЗаказыОстатки.МестоХранения,
		|	Значение(Справочник.Габариты.Нулевой) как Габарит,
		|	СобранныеЗаказыОстатки.ПунктВыдачи как ТочкаНазначения,
		|	РАЗНОСТЬДАТ(СобранныеЗаказыОстатки.Партия.Дата, &ДатаДокумента, ДЕНЬ) как ВремяХранения,
		|	СобранныеЗаказыОстатки.КоличествоОстаток как Количество,
		|	1 как КоличествоМест,
		|	СобранныеЗаказыОстатки.СтоимостьХраненияОстаток Как СтоимостьХранения,
		|	СобранныеЗаказыОстатки.СтоимостьДоставкиОстаток Как СтоимостьДоставки,
		|	СобранныеЗаказыОстатки.СтоимостьДоставкиОстаток + СобранныеЗаказыОстатки.СтоимостьХраненияОстаток Как СтоимостьИтого,
		|	СобранныеЗаказыОстатки.Заказ.ДокументЗаказа.Участник КАК Участник
		|ИЗ
		|	РегистрНакопления.СобранныеЗаказы.Остатки(, ПунктВыдачи = &ПунктВыдачиКурьерскойДоставки) КАК СобранныеЗаказыОстатки
		|ГДЕ
		|	СобранныеЗаказыОстатки.КоличествоОстаток > 0";
	
	Запрос.УстановитьПараметр("Подбор", 						Константы.ПомечатьЗаказыПриФормированииДокументаВыдачаТранзита.Получить());
	Запрос.УстановитьПараметр("ПунктВыдачиКурьерскойДоставки", 	ТочкаНазначения);
	Запрос.УстановитьПараметр("ДатаДокумента", 					Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Покупки.Загрузить(РезультатЗапроса.Выгрузить());
КонецПроцедуры	

#КонецОбласти

#Область ГруппыДоставки
Процедура УстановитьВыдачуВГруппуДоставки(Отказ)
	ТочкаКурьера = СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0100");
	
	
	Для каждого стр из Покупки Цикл
		Если не (ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Коробки") и
			(стр.Покупка.ВидСтикера=Перечисления.ВидыСтикеров.ГруппаДоставки или
				стр.Покупка.ВидСтикера=Перечисления.ВидыСтикеров.ЗаказТК )) Тогда Продолжить КонецЕсли;

	
		Если стр.Покупка.ВыдачаТранзита<>Ссылка  Тогда
			Если ЗначениеЗаполнено(стр.Покупка.ВыдачаТранзита)   Тогда
				ТекстСообщения="Группа доставки "+стр.Покупка+"уже отправлена  "+стр.Покупка.ВыдачаТранзита;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		обКоробка=стр.Покупка.ПолучитьОбъект();
		обКоробка.ВыдачаТранзита=Ссылка;
		Попытка
			обКоробка.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Для каждого стр из Покупки Цикл
		Если не (ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Коробки") и
			(стр.Покупка.ВидСтикера=Перечисления.ВидыСтикеров.ГруппаДоставки или
				стр.Покупка.ВидСтикера=Перечисления.ВидыСтикеров.ЗаказТК )) Тогда Продолжить КонецЕсли;
		
		обКоробка=стр.Покупка.ПолучитьОбъект();
		обКоробка.ВыдачаТранзита=Документы.ВыдачаТранзита.ПустаяСсылка();
		Попытка
			обКоробка.Записать();
		Исключение
			Отказ =Истина;
		КонецПопытки;
	КонецЦикла;
	установитьСтатусКурьерскойДоставки(Перечисления.СтатусыДоставки.Собран);
КонецПроцедуры


Процедура установитьСтатусКурьерскойДоставки(статус)
	Для каждого элем из Покупки Цикл
		Если ТипЗнч(элем.Партия) = Тип("ДокументСсылка.КурьерскаяДоставка") Тогда
			обПартия = элем.Партия.ПолучитьОбъект();
			обПартия.статусДоставки = Статус;
			обПартия.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	


Процедура ОтправитьВедомостьКурьерскойДоставки() Экспорт
	письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	ПолучателиПисьма				= Новый Массив;
	
	новыйПолучатель 				= Новый Структура("Адрес, Представление");
	новыйПолучатель.Адрес 			= Константы.ЭлектроннаяПочтаКурьерскойДоставки.Получить();
	новыйПолучатель.Представление 	= "Крьерская доставка";
	ПолучателиПисьма.Добавить(новыйПолучатель);
	
	ПолноеИмяФайла 		= ПолучитьИмяВременногоФайла("pdf");
	
	массивОбъектов						= новый массив;
	массивОбъектов.Добавить(ЭтотОбъект.Ссылка);
	ПечатнаяФорма 						= Документы.ВыдачаТранзита.ПечатьДоставкаКурьером(массивОбъектов, неопределено);
 	ПечатнаяФорма.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ПечатнаяФорма.АвтоМасштаб			= Истина;
	
	ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	ДвоичныеДанные 				= Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище 	= ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ИмяФайла					= "ВД_"+Номер+"_"+Формат(Дата,"ДФ=dd_MM_yyyy_;")+ТочкаОтправитель.Код+".pdf";
	ОписаниеФайла 				= Новый Структура;
	ОписаниеФайла.Вставить("Представление", 			ИмяФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
	УдалитьФайлы(ПолноеИмяФайла);
	
	Вложения = Новый массив;
	Вложения.Добавить(ОписаниеФайла);
	
	
	ПараметрыОтправки =  Новый Структура;
	ПараметрыОтправки.Вставить("Кому",					ПолучателиПисьма);
	ПараметрыОтправки.Вставить("ПолучателиСообщения",	ПолучателиПисьма);
	ПараметрыОтправки.Вставить("Тема",					"Ведомость доставки №"+Номер+" от " +Дата +"("+ТочкаОтправитель+")");
	ПараметрыОтправки.Вставить("Вложения", 				Вложения);
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	//@skip-warning
	ИдентификаторСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись,ПараметрыОтправки);
	
	
КонецПроцедуры




#КонецОбласти



