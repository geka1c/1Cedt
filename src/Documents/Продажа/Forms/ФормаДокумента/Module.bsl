#Область ШтрихКоды

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ScanData" Тогда
		Если Источник = "ПодключаемоеОборудование"   и ВводДоступен() Тогда
			ШК = СтоСП_Клиент.ПолучитьШКизПараметров(Параметр);
			ОбработатьШКнаКлиенте(ШК);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура 	ОбработатьШКнаКлиенте(ШК)
	ДанныеШК    = СП_Штрихкоды.ПолучитьДанныеПоШК(ШК);

	Если Строка(ДанныеШК.Тип) 	= "Номенклатура (61)" Тогда //Номенклатура
		Если ДобавитьТовар(ДанныеШК.Номенклатура) Тогда
			#Если не вебклиент Тогда
				Сигнал();
			#КонецЕсли
		КонецЕсли;		
	ИначеЕсли Строка(ДанныеШК.Тип) 	= "Карта участника (22)"		Тогда	
		Если ЗначениеЗаполнено(ДанныеШК.Владелец) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Карта: "+ДанныеШК.КартаУчастника+" уже привязана к участнику: "+ДанныеШК.Владелец);					
			возврат
		КонецЕсли;	
		Если ДобавитьТовар(ДанныеШК.КартаУчастника) Тогда
			#Если не вебклиент Тогда
				Сигнал();
			#КонецЕсли
		КонецЕсли;		
	Иначеесли Строка(ДанныеШК.Тип) = "Сотрудник (55)" 			Тогда	
		Если СП_РаботаСДокументами_Клиент.ЗаписатьДокумент(этотОбъект,,ДанныеШК.Сотрудник) Тогда
			Закрыть();
		КонецЕсли;		
	КонецЕсли;


КонецПроцедуры


Функция 	ДобавитьТовар(Номенклатура)
	НеКарта = ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура");
	Если НеКарта Тогда
		Цена = Номенклатура.Цена;
	Иначе
		Цена = Константы.СтоимостьКартыУчастника.Получить();
	КонецЕсли;	
	
	строки_Товара = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если строки_Товара.Количество() = 0 Тогда
		текущийТовар 				= Объект.Товары.Добавить();
		текущийТовар.Номенклатура 	= Номенклатура;
		текущийТовар.Количество		= 1;
		текущийТовар.Цена			= Цена;
		текущийТовар.Сумма			= Цена*текущийТовар.Количество;
		 				
	ИначеЕсли НеКарта Тогда
		текущийТовар				= строки_Товара[0];
		текущийТовар.Количество 	= текущийТовар.Количество + 1;
		текущийТовар.Сумма			= Цена*текущийТовар.Количество;
	КонецЕсли;
	Возврат истина;
КонецФункции	



#КонецОбласти

#Область ШтрихКоды


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		

	//Сканер штрихкода
   СтоСП_Клиент.ПодключитьСканерШК(УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ПересчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПересчитатьСумму();
КонецПроцедуры


#КонецОбласти

#Область ФискальныйЧек

&НаКлиенте
Процедура 	ПробитьЧек(Команда)
		ЧекПробит = ПробитьЧекНаКлиенте();
	Если ЧекПробит Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Функция 	ПробитьЧекНаКлиенте()
	
	Результат = Ложь;
	ЕстьОшибки = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	
	Объект.Дата = ТекущаяДата();
	
	Если Не ЕстьОшибки  Тогда
		
		Результат = ПробитьЧекВыполнить();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПробитьЧекНаКлиенте()

&НаКлиенте
Функция 	ПробитьЧекВыполнить()
	
	ЧекПробит = Ложь;
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	

	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
	
		ПараметрыКассыККМ = ПолучитьПараметрыКассыККМ();
		ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		Если ИдентификаторУстройстваФР <> Неопределено  Тогда
			
			// Подключаем ФР
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                              ИдентификаторУстройстваФР,
			                                                                              ОписаниеОшибки);
			
			Если Результат  Тогда
				
					
					// Готовим данные
					ВходныеПараметры  = Новый Массив;
					ВыходныеПараметры = Неопределено;
					
					НомерСекции = 1;
					
					// Подготовка таблицы товаров
					ТаблицаТоваров = Новый Массив();
					
					Для Каждого СтрокаТЧ Из Объект.Товары Цикл
						
						Сумма = Объект.Товары.Итог("Сумма");//СтрокаТЧ.СтоимостьХранения;
						
						СуммаСкидки   = 0;
						ПроцентСкидки = 0;
						
						СтрокаТаблицыТоваров = Новый СписокЗначений();
						СтрокаТаблицыТоваров.Добавить(Строка(СтрокаТЧ.Номенклатура));
						                                                            //  1 - Наименование
						СтрокаТаблицыТоваров.Добавить("");                          //  2 - Штрихкод
						СтрокаТаблицыТоваров.Добавить("");                          //  3 - Артикул
						СтрокаТаблицыТоваров.Добавить(НомерСекции);		            //  4 - Номер отдела
						СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Сумма);  //  5 - Цена за позицию без скидки
						СтрокаТаблицыТоваров.Добавить(1); 		//  6 - Количество
						СтрокаТаблицыТоваров.Добавить("");                          //  7 - Наименование скидки/наценки
						СтрокаТаблицыТоваров.Добавить(0);           			    //  8 - Сумма скидки/наценки
						СтрокаТаблицыТоваров.Добавить(0);			                //  9 - Процент скидки/наценки
						СтрокаТаблицыТоваров.Добавить(0);                       // 10 - Сумма позиции со скидкой
						СтрокаТаблицыТоваров.Добавить(0);                           // 11 - Номер налога (1)
						СтрокаТаблицыТоваров.Добавить(0); 					        // 12 - Сумма налога (1)
						СтрокаТаблицыТоваров.Добавить(0); 				            // 13 - Процент налога (1)
						СтрокаТаблицыТоваров.Добавить(0);                           // 14 - Номер налога (2)
						СтрокаТаблицыТоваров.Добавить(0);                           // 15 - Сумма налога (2)
						СтрокаТаблицыТоваров.Добавить(0);                           // 16 - Процент налога (2)
						СтрокаТаблицыТоваров.Добавить("");                          // 17 - Наименование секции форматирования товарной строки
						
						ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
					КонецЦикла;
					//
					//Если Объект.ПоискНикаСтоимость<>0 Тогда
					//	Сумма = Объект.ПоискНикаСтоимость;
					//	
					//	СуммаСкидки   = 0;
					//	ПроцентСкидки = 0;
					//	
					//	СтрокаТаблицыТоваров = Новый СписокЗначений();
					//	СтрокаТаблицыТоваров.Добавить("Поиск ника");
					//																//  1 - Наименование
					//	СтрокаТаблицыТоваров.Добавить("");                          //  2 - Штрихкод
					//	СтрокаТаблицыТоваров.Добавить("");                          //  3 - Артикул
					//	СтрокаТаблицыТоваров.Добавить(НомерСекции);		                   //  4 - Номер отдела
					//	СтрокаТаблицыТоваров.Добавить(Объект.ПоискНикаСтоимость);               //  5 - Цена за позицию без скидки
					//	СтрокаТаблицыТоваров.Добавить(1); //  6 - Количество
					//	СтрокаТаблицыТоваров.Добавить("");                          //  7 - Наименование скидки/наценки
					//	СтрокаТаблицыТоваров.Добавить(0);           			      //  8 - Сумма скидки/наценки
					//	СтрокаТаблицыТоваров.Добавить(0);			               //  9 - Процент скидки/наценки
					//	СтрокаТаблицыТоваров.Добавить(Сумма);                       // 10 - Сумма позиции со скидкой
					//	СтрокаТаблицыТоваров.Добавить(0);                           // 11 - Номер налога (1)
					//	СтрокаТаблицыТоваров.Добавить(0); 					          // 12 - Сумма налога (1)
					//	СтрокаТаблицыТоваров.Добавить(0); 				            // 13 - Процент налога (1)
					//	СтрокаТаблицыТоваров.Добавить(0);                           // 14 - Номер налога (2)
					//	СтрокаТаблицыТоваров.Добавить(0);                           // 15 - Сумма налога (2)
					//	СтрокаТаблицыТоваров.Добавить(0);                           // 16 - Процент налога (2)
					//	СтрокаТаблицыТоваров.Добавить("");                          // 17 - Наименование секции форматирования товарной строки
					//	
					//	ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
					//
					//	
					//	
					//	
					//КонецЕсли;	
					//
					// Подготовка таблицы оплат
					ТаблицаОплат = Новый Массив();
					
					СтоимостьЧека=Объект.Товары.Итог("Сумма");
					// Наличные
					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(0);
					СтрокаОплаты.Добавить(СтоимостьЧека);
					СтрокаОплаты.Добавить("Наличная оплата");
					СтрокаОплаты.Добавить("");
					ТаблицаОплат.Добавить(СтрокаОплаты);
					// Безналичные
					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(1);
					СтрокаОплаты.Добавить(0);
					СтрокаОплаты.Добавить("Безналичная оплата");
					СтрокаОплаты.Добавить("");
					ТаблицаОплат.Добавить(СтрокаОплаты);
					
					// Подготовка таблицы общих параметров
					ОбщиеПараметры = Новый Массив();
					ОбщиеПараметры.Добавить(0);                      //  1 - Тип чека
					ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
					ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
					ОбщиеПараметры.Добавить(СтоимостьЧека);  //  4 - Сумма по чеку без скидок/наценок
					ОбщиеПараметры.Добавить(СтоимостьЧека);  //  5 - Сумма по чеку с учетом всех скидок/наценок
					ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
					ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
					ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
					ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
					ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
					ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
					ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала
					
					ВходныеПараметры.Добавить(ТаблицаТоваров);
					ВходныеПараметры.Добавить(ТаблицаОплат);
					ВходныеПараметры.Добавить(ОбщиеПараметры);
					
					// Печатаем чек.
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
					                                                        "PrintReceipt",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
				
				
				Если Результат  Тогда
					
					// Установить полученное значение номера чека реквизиту документа.
					Объект.НомерЧекаККМ = ВыходныеПараметры[1];
										
					Объект.Дата   = ТекущаяДата();
					Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
						Объект.НомерЧекаККМ = 1;
					КонецЕсли;
					
					Модифицированность = Истина;
					
					РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
					Если РезультатПроведения = Истина Тогда
						ЧекПробит = Истина;
					КонецЕсли;
					
					ПодключитьОбработчикОжидания("УстановитьТекущийЭлементНаКнопкуЗакрыть", 0.1, Истина);
					
				//	Оповестить("ОбновитьФормуСпискаДокументовЧекККМ");
					
				Иначе
					ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					                             "%ДополнительноеОписание%",
					                             ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				// Отключаем ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройстваФР);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
				                            |Чек не напечатан на фискальном регистраторе.
				                            |Дополнительное описание:
				                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ЧекПробит;
	
КонецФункции // ПробитьЧекВыполнить()

&НаКлиенте
Процедура 	УстановитьТекущийЭлементНаКнопкуЗакрыть()
	
	ТекущийЭлемент = Элементы.Закрыть;
	
КонецПроцедуры


Функция 	ПолучитьПараметрыКассыККМ()
	параметрыККМ=Новый Структура;
	параметрыККМ.Вставить("ИдентификаторУстройства",Константы.фр.Получить());
	возврат параметрыККМ;
	
КонецФункции

#КонецОбласти 

Процедура ПересчитатьСумму()
	Если Объект.Товары.Количество()>0 Тогда
		стр			= Объект.Товары[Элементы.Товары.ТекущаяСтрока];
		стр.Сумма	=стр.Количество*Стр.Цена;
	КонецЕсли;
КонецПроцедуры	


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СП_РаботаСДокументами.ПриСозданииНаСервере(ЭтотОбъект);
	Если ЗначениеЗАполнено(Параметры.Участник) Тогда
		Объект.Участник = Параметры.Участник;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКодВручную(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВводаШК",,ЭтотОбъект,,,,Новый ОписаниеОповещения("ВвестиШтрихКодВручную_Завершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКодВручную_Завершение(ШК, ДополнительныеПараметры) Экспорт
	ОбработатьШКнаКлиенте(ШК);
КонецПроцедуры	

