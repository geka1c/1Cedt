
Процедура ОбработкаПроведения(Отказ, Режим)
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	Документы.ПоступлениеПристроя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
//	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен_РН(ДополнительныеСвойства, Движения, Отказ);
	
	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен_РН_Ошибки(ДополнительныеСвойства, Движения, Отказ);	
	СП_ДвиженияСервер.ОтразитьНеВыгруженноНаСайт(ДополнительныеСвойства, Движения, Отказ);	
	
	СП_ДвиженияСервер.ОтразитьОстаткиТоваров(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьПриход(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьТранзит(ДополнительныеСвойства, Движения, Отказ);
	

	#КонецОбласти
	УстановитьПараметрыМегаордера();	
КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
	УстановитьПараметрыМегаордера(Ложь);
КонецПроцедуры

Процедура ЗаполнитьНеПринятыми() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пристрой.Ссылка КАК Пристрой
		|ИЗ
		|	Справочник.Пристрой КАК Пристрой
		|ГДЕ
		|	НЕ Пристрой.ПометкаУдаления
		|	И Пристрой.ПоступлениеПристроя = ЗНАЧЕНИЕ(Документ.ПоступлениеПристроя.ПустаяСсылка)
		|	И Пристрой.УчастникОтправитель = &УчастникОтправитель";
	
	Запрос.УстановитьПараметр("УчастникОтправитель", Участник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ТранзитныйПВ = Константы.ПВТранзита.Получить();
	ТранзитныйПВ =?(ЗначениеЗаполнено(ТранзитныйПВ),ТранзитныйПВ,СвояТочка);
	
	стоймостьПриема = Константы.ТарифПристроя.Получить();
	
	Пока Выборка.Следующий() Цикл
		Если Заказы.НайтиСтроки(новый Структура("Пристрой",Выборка.Пристрой)).Количество()>0 Тогда продолжить; КонецЕсли;
		стр_заказ = Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(стр_заказ,Выборка);
		стр_заказ.Сумма 		= стоймостьПриема;
		стр_заказ.ПВТранзита 	= ?(стр_заказ.Пристрой.ТочкаНазначения=СвояТочка,СвояТочка,ТранзитныйПВ);
	КонецЦикла;
КонецПроцедуры	



#Область Обмен

Функция   	ВыгрузитьНаСайт() Экспорт
	
	СтрокаПротокола=новый Структура ("ДатаНачала, ДатаОкончания,Результат, ПолученныеДанные");
	СтрокаПротокола.ДатаНачала=ТекущаяДата();
	
	хмл_отправили	= СкомпоноватьДляВыгрузки();
	стр_Ответа 		= СтоСПОбмен_Выгрузка100сп.Выгрузить(хмл_отправили);
	
	СтрокаПротокола.ДатаОкончания	= ТекущаяДата();
	СтрокаПротокола.ПолученныеДанные= стр_Ответа.Получили;
	
	Если не стр_Ответа.Свойство("Разбор") Тогда
		СтрокаПротокола.Результат=Ложь;
	Иначе	
		СтрокаПротокола.Результат = стр_Ответа.Разбор.авторизацияВыполнена;
	КонецЕсли;
	СтоСПОбмен_Выгрузка100сп.СохранитьПротоколОбмена(СтрокаПротокола,Ссылка);
	Если не СтрокаПротокола.Результат Тогда Возврат Ложь; Конецесли;
	
	
	Если не стр_Ответа.Разбор.авторизацияВыполнена Тогда Возврат ложь; КонецЕсли;
	
	Статус=Перечисления.СтатусОтпавкиНаСайт.Отправлен;
	тз=Неопределено;
	Если стр_Ответа.Разбор.Свойство("incomes",тз) Тогда
		incomes_ОтразитьРезультатВыгрузки(тз);
	КонецЕсли;	
	Возврат Истина;
КонецФункции

Функция 	СкомпоноватьДляВыгрузки() Экспорт
		
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("distributors");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsd","http://www.w3.org/2001/XMLSchema");
	///////
	ЗаписьXML.ЗаписатьНачалоЭлемента("incomes");	
	хмл_income			= Документы.ПоступлениеПристроя.ПолучитьТэг_Income(Ссылка);
	ЗаписьXML.ЗаписатьБезОбработки(хмл_income);

	ЗаписьXML.ЗаписатьКонецЭлемента();           //incomes
	//////
	ЗаписьXML.ЗаписатьКонецЭлемента();           //distributors
	Возврат ЗаписьXML.Закрыть();
КонецФункции	

Процедура 	incomes_ОтразитьРезультатВыгрузки(тз) 
		
	
	Запрос=новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТЗ.arrivalNumber КАК arrivalNumber,
	|	ТЗ.firstIncomeCode КАК firstIncomeCode,
	|	ТЗ.message КАК message,
	|	ТЗ.stickerId КАК stickerId,
	|	ТЗ.receiverUid КАК receiverUid,
	|	ТЗ.packageId КАК packageId,
	|	ТЗ.destinationDistributorCode КАК destinationDistributorCode,
	|	ТЗ.orderId КАК orderId,
	|	ТЗ.groupCode КАК groupCode,
	|	ТЗ.orderType КАК orderType,
	|	ТЗ.pid КАК pid,
	|	ТЗ.secureCode КАК secureCode,
	|	ТЗ.result КАК result,
	|	ТЗ.date КАК date,
	|	ТЗ.uid КАК uid
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеПристрояЗаказы.Пристрой КАК Пристрой,
	|	ПоступлениеПристрояЗаказы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ СписокПристроя
	|ИЗ
	|	Документ.ПоступлениеПристроя.Заказы КАК ПоступлениеПристрояЗаказы
	|ГДЕ
	|	ПоступлениеПристрояЗаказы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.firstIncomeCode КАК firstIncomeCode,
	|	ВТ.message КАК message,
	|	ВТ.receiverUid КАК receiverUid,
	|	ВТ.packageId КАК packageId,
	|	ВТ.orderId КАК orderId,
	|	ВТ.secureCode КАК secureCode,
	|	ВТ.destinationDistributorCode КАК destinationDistributorCode,
	|	ВТ.result КАК result,
	|	ВТ.date КАК date,
	|	СписокПристроя.Пристрой КАК Пристрой
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокПристроя КАК СписокПристроя
	|		ПО Выразить(ВТ.orderId как  строка(10)) = СписокПристроя.Пристрой.Код";
	Запрос.Параметры.Вставить("ТЗ",ТЗ);
	Запрос.Параметры.Вставить("Ссылка",Ссылка);
	Результат=Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	//Отражаем результат обмена
	Если тз<>неопределено Тогда  
		Для каждого стр из Заказы Цикл
			мас_НайденоВОтвете=ТЗ.НайтиСтроки(Новый Структура("Пристрой",стр.Пристрой));
			
			Если мас_НайденоВОтвете.Количество()>0 тогда
				стр_ответа=мас_НайденоВОтвете[0];
				Если стр_ответа.result="ok" или стр_ответа.result="ap" Тогда
					стр.Отправлено=Истина;
					стр.СообщениеОшибки="";
					посылка_объект=стр.ШК.Покупка.ПолучитьОбъект();
					посылка_объект.Участник			= СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(стр_ответа.receiverUid);
					посылка_объект.ПунктВыдачи	= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(стр_ответа.destinationDistributorCode);
					посылка_объект.ПерваяТочка		= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(стр_ответа.firstIncomeCode);
					посылка_объект.secureCode      = стр_ответа.secureCode;
					Попытка
						посылка_объект.Записать();
					Исключение
					КонецПопытки;
					
					
				КонецЕсли;	
				стр.СообщениеОшибки=стр_ответа.message;
			Иначе	
				стр.СообщениеОшибки="Не найдено в ответе";
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

Процедура 	ОтвязатьПристройОтПосылки(Пристрой) Экспорт
	Если  СтоСПОбмен_Пристрой.Выгрузить_ОтвязатьПристройОтПосылки(Пристрой) Тогда
		масс_Строк = Заказы.НайтиСтроки(Новый Структура("Пристрой",Пристрой));	
		Для каждого стр из масс_Строк Цикл
			стр.Отправлено = Ложь;
			стр.СообщениеОшибки = "";
		КонецЦикла
	КонецЕсли;	
КонецПроцедуры		

#КонецОбласти






Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	проверяемШК=Заказы.ВыгрузитьКолонку("ШК");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обмен100спСообщения.Мегаордер КАК Мегаордер,
		|	Обмен100спСообщения.Партия КАК Партия
		|ИЗ
		|	РегистрСведений.Обмен100спСообщения КАК Обмен100спСообщения
		|ГДЕ
		|	Обмен100спСообщения.Мегаордер В(&проверяемШК)
		|	И Обмен100спСообщения.Партия <> &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("проверяемШК", проверяемШК);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстСообщения="Стикер: "+ВыборкаДетальныеЗаписи.Мегаордер+"Уже оприходован документом: "+ВыборкаДетальныеЗаписи.Партия;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЦикла;
КонецПроцедуры




#Область ГруппыДоставки
Процедура УстановитьПараметрыМегаордера(Проведение=Истина)
	Для каждого стр из Заказы Цикл
		обМегаордер=стр.ШК.ПолучитьОбъект();
		обМегаордер.Участник=стр.Пристрой.Участник;
		обМегаордер.ПунктВыдачи=стр.Пристрой.ТочкаНазначения;
		Попытка
			обМегаордер.Записать();
		Исключение
		КонецПопытки;
		
		обПристрой = стр.Пристрой.ПолучитьОбъект();
		обПристрой.ШК=стр.ШК;
		обПристрой.ПоступлениеПристроя=?(Проведение,Ссылка,Документы.ПоступлениеПристроя.ПустаяСсылка());;
		Попытка
			обПристрой.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти


#Область Обмен100СП


#КонецОбласти
