
Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	
	Если аСППрверки.НаличиеОстатковНаСкладе(Покупки,Участник)=ложь Тогда	
		Отказ=Истина;
	КонецЕсли;
	Если Отказ  Тогда
		Возврат;
	КонецЕсли;
	
	#Область ПравильноеПроведение
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, Режим);
	Документы.Расходная.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
//	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен(ДополнительныеСвойства, Движения, Отказ);
	
	СтоСПОбмен_Общий.ОтразитьСтоСПОбмен_РН(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	СП_ДвиженияСервер.ОтразитьОстаткиТоваров(ДополнительныеСвойства, Движения, Отказ);
    СП_ДвиженияСервер.ОтразитьРасход(ДополнительныеСвойства, Движения, Отказ);
	ПроведениеСерверСП.ОтразитьДвиженияПоТаблице(ДополнительныеСвойства, Движения, "ТоварыНаСкладах", Отказ);
	
	#КонецОбласти
	
	
		
	Движения.ОстаткиТоваров.Записывать = Истина;
	Движения.Расход.Записывать = Истина;

	

		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Участник.БлокироватьВыдачу и РежимЗаписи<>РежимЗаписиДокумента.ОтменаПроведения Тогда
		Сообщение= новый СообщениеПользователю;
		Сообщение.текст ="Для участника "+Участник+" выдача покупок заблокирована по причине "+Участник.БлокироватьВыдачуКомментарий;
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		отказ=истина;
	КонецЕсли;	
	
	ЗаполнитьШК(Покупки);
КонецПроцедуры


Процедура ЗаполнениеКодов() Экспорт
	для Каждого стр из Покупки Цикл
		Если ЗначениеЗаполнено(стр.Покупка.secureCode) Тогда
			х=новый ХешированиеДанных(ХешФункция.CRC32);
			х.Добавить(СтрЗаменить(Строка(стр.Покупка.Код)+"_"+Строка(Участник.Код)+"_"+стр.Покупка.secureCode," ",""));
			стр.КодЗаказа=Лев(СтрЗаменить(Строка(х.ХешСумма)," ",""),4);
		Иначе 
			стр.КодЗаказа ="Нет кода!";
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Функция ЗаполнитьОстатками() Экспорт
	//КодУчастника=Участник.Код;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.Покупка КАК Покупка,
	|	Остатки.Участник КАК Участник,
	|	Остатки.Габарит КАК Габарит,
	|	Остатки.МестоХранения КАК МестоХранения,
	|	Остатки.Оплачен КАК Оплачен,
	|	Остатки.Потерян КАК Потерян,
	|	Остатки.Партия КАК Партия,
	|	Остатки.КоличествоОстаток КАК КоличествоОстаток,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПраздничныеДни.Дата) КАК ПраздничныхДней,
	|	МАКСИМУМ(ЕСТЬNULL(НегабаритЗначения.Вес, 0)) КАК Вес,
	|	МАКСИМУМ(ЕСТЬNULL(НегабаритЗначения.объем, 0)) КАК Объем,
	|	ВЫРАЗИТЬ(МАКСИМУМ(Мегаордера.Ссылка) КАК Справочник.Мегаордера) КАК ШК
	|ПОМЕСТИТЬ ОстаткиУчастника
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваров.Остатки(&Период, Участник = &Участник) КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПраздничныеДни КАК ПраздничныеДни
	|		ПО (ПраздничныеДни.Дата > Остатки.Партия.Дата)
	|		И (ПраздничныеДни.Дата < &Период)
	|		И (НЕ ПраздничныеДни.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НегабаритЗначения КАК НегабаритЗначения
	|		ПО Остатки.Партия = НегабаритЗначения.Регистратор
	|		И Остатки.Покупка = НегабаритЗначения.Покупка
	|		И Остатки.Участник = НегабаритЗначения.Участник
	|		И Остатки.Габарит = НегабаритЗначения.Габарит
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мегаордера КАК Мегаордера
	|		ПО Остатки.Покупка = Мегаордера.Покупка
	|		И Выбор
	|			когда ТипЗначения(Остатки.Покупка) <> Тип(Справочник.Посылки)
	|				Тогда Остатки.Участник = Мегаордера.Участник
	|			Иначе Истина
	|		Конец
	|ГДЕ
	|	Остатки.Потерян = ЛОЖЬ
	|СГРУППИРОВАТЬ ПО
	|	Остатки.МестоХранения,
	|	Остатки.Оплачен,
	|	Остатки.Габарит,
	|	Остатки.Потерян,
	|	Остатки.Участник,
	|	Остатки.Партия,
	|	Остатки.КоличествоОстаток,
	|	Остатки.Покупка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиУчастника.Покупка КАК Покупка,
	|	ОстаткиУчастника.Участник КАК Участник,
	|	ОстаткиУчастника.Габарит КАК Габарит,
	|	ОстаткиУчастника.МестоХранения КАК МестоХранения,
	|	ОстаткиУчастника.Оплачен КАК Оплачен,
	|	ОстаткиУчастника.Потерян КАК Потерян,
	|	ОстаткиУчастника.Партия КАК Партия,
	|	ОстаткиУчастника.КоличествоОстаток КАК КоличествоОстаток,
	|	ОстаткиУчастника.ПраздничныхДней КАК ПраздничныхДней,
	|	ОстаткиУчастника.Вес КАК Вес,
	|	ОстаткиУчастника.Объем КАК Объем,
	|	ОстаткиУчастника.ШК КАК ШК,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОстаткиУчастника.Покупка) = ТИП(Справочник.Посылки)
	|			ТОГДА ОстаткиУчастника.Покупка.ПерваяТочка
	|		ИНАЧЕ ОстаткиУчастника.ШК.ПерваяТочкаПриема
	|	КОНЕЦ КАК ПерваяТочка
	|ПОМЕСТИТЬ Пред
	|ИЗ
	|	ОстаткиУчастника КАК ОстаткиУчастника
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пред.Потерян КАК Потерян,
	|	Пред.Покупка КАК Покупка,
	|	Пред.Оплачен КАК Оплачен,
	|	Пред.МестоХранения КАК МестоХранения,
	|	Пред.Габарит КАК Габарит,
	|	Пред.КоличествоОстаток КАК Количество,
	|	РАЗНОСТЬДАТ(Пред.Партия.Дата, &Период, ДЕНЬ) - ЕСТЬNULL(Пред.ПраздничныхДней, 0) КАК ВремяХранения,
	|	Пред.Партия КАК Партия,
	|	Пред.Вес КАК Вес,
	|	Пред.Объем КАК Объем,
	|	Пред.ПерваяТочка КАК ПерваяТочка,
	|	ЕСТЬNULL(Пред.ПраздничныхДней, 0) КАК Праздники,
	|	ЕСТЬNULL(ТарифыПоНаправлениямСрезПоследних.Стоимость, 0) КАК СтоимостьДоставки,
	|	Пред.ШК КАК ШК
	|ПОМЕСТИТЬ Пред2
	|ИЗ
	|	Пред КАК Пред
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыПоНаправлениям.СрезПоследних(&Период,) КАК ТарифыПоНаправлениямСрезПоследних
	|		ПО (ТарифыПоНаправлениямСрезПоследних.Куда = &СвойГород)
	|		И Пред.Габарит = ТарифыПоНаправлениямСрезПоследних.Габарит
	|		И Пред.ПерваяТочка.ГородСП = ТарифыПоНаправлениямСрезПоследних.Откуда
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пред2.Потерян КАК Потерян,
	|	Пред2.Покупка КАК Покупка,
	|	Пред2.Оплачен КАК Оплачен,
	|	Пред2.МестоХранения КАК МестоХранения,
	|	Пред2.Габарит КАК Габарит,
	|	Пред2.Количество КАК Количество,
	|	Пред2.ВремяХранения КАК ВремяХранения,
	|	Пред2.Габарит.СтоимостьХранения + ВЫБОР
	|		КОГДА Пред2.ВремяХранения - Пред2.Габарит.ДниХранения > 0
	|			ТОГДА Пред2.ВремяХранения - Пред2.Габарит.ДниХранения
	|		ИНАЧЕ 0
	|	КОНЕЦ * Пред2.Габарит.ДобавочнаяСтоимость КАК СтоимостьХранения,
	|	Пред2.Партия КАК Партия,
	|	Пред2.Покупка.Код КАК ПокупкаСпр,
	|	Пред2.Вес КАК Вес,
	|	Пред2.Объем КАК Объем,
	|	Пред2.ПерваяТочка КАК ПерваяТочка,
	|	Пред2.Праздники КАК Праздники,
	|	Пред2.Габарит.СтоимостьКГ * Пред2.Вес + ВЫБОР
	|		КОГДА Пред2.ВремяХранения - Пред2.Габарит.ДниХранения > 0
	|			ТОГДА Пред2.ВремяХранения - Пред2.Габарит.ДниХранения
	|		ИНАЧЕ 0
	|	КОНЕЦ * Пред2.Габарит.ДобавочнаяСтоимость КАК СтоимостьХраненияКГ,
	|	Пред2.Габарит.СтоимостьКуб * Пред2.Объем + ВЫБОР
	|		КОГДА Пред2.ВремяХранения - Пред2.Габарит.ДниХранения > 0
	|			ТОГДА Пред2.ВремяХранения - Пред2.Габарит.ДниХранения
	|		ИНАЧЕ 0
	|	КОНЕЦ * Пред2.Габарит.ДобавочнаяСтоимость КАК СтоимостьХраненияКуб,
	|	Пред2.СтоимостьДоставки КАК СтоимостьДоставки,
	|	Пред2.ШК КАК ШК
	|ПОМЕСТИТЬ Пред3
	|ИЗ
	|	Пред2 КАК Пред2
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пред3.Потерян КАК Потерян,
	|	Пред3.Покупка КАК Покупка,
	|	Пред3.Покупка КАК ПокупкаСсылка,
	|	Пред3.Оплачен КАК Оплачен,
	|	Пред3.МестоХранения КАК МестоХранения,
	|	Пред3.Габарит КАК Габарит,
	|	Пред3.Количество КАК Количество,
	|	Пред3.ВремяХранения КАК ВремяХранения,
	|	ВЫБОР
	|		КОГДА Пред3.Габарит.НеГабарит
	|			ТОГДА ВЫБОР
	|				КОГДА Пред3.СтоимостьХраненияКГ > Пред3.СтоимостьХраненияКуб
	|					ТОГДА Пред3.СтоимостьХраненияКГ
	|				ИНАЧЕ Пред3.СтоимостьХраненияКуб
	|			КОНЕЦ
	|		ИНАЧЕ Пред3.СтоимостьХранения
	|	КОНЕЦ КАК СтоимостьХранения,
	|	Пред3.Партия КАК Партия,
	|	Пред3.ПокупкаСпр КАК ПокупкаСпр,
	|	Пред3.Вес КАК Вес,
	|	Пред3.Объем КАК Объем,
	|	Пред3.ПерваяТочка КАК ПерваяТочка,
	|	Пред3.Праздники КАК Праздники,
	|	Пред3.СтоимостьХраненияКГ КАК СтоимостьХраненияКГ,
	|	Пред3.СтоимостьХраненияКуб КАК СтоимостьХраненияКуб,
	|	Пред3.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЕСТЬNULL(Пред3.ШК.ПерваяТочкаПриема.ГородСП, ЗНАЧЕНИЕ(Справочник.ГородаСП.ПустаяСсылка)) КАК ГородСП,
	|	Пред3.ШК КАК ШК
	|ПОМЕСТИТЬ Пред4
	|ИЗ
	|	Пред3 КАК Пред3
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пред4.Потерян КАК Потерян,
	|	Пред4.Покупка КАК Покупка,
	|	Пред4.ПокупкаСсылка КАК ПокупкаСсылка,
	|	Пред4.Оплачен КАК Оплачен,
	|	Пред4.МестоХранения КАК МестоХранения,
	|	Пред4.Габарит КАК Габарит,
	|	Пред4.Количество КАК Количество,
	|	Пред4.ВремяХранения КАК ВремяХранения,
	|	Пред4.СтоимостьХранения КАК СтоимостьХранения,
	|	Пред4.Партия КАК Партия,
	|	Пред4.ПокупкаСпр КАК ПокупкаСпр,
	|	Пред4.Вес КАК Вес,
	|	Пред4.Объем КАК Объем,
	|	Пред4.ПерваяТочка КАК ПерваяТочка,
	|	Пред4.Праздники КАК Праздники,
	|	Пред4.СтоимостьХраненияКГ КАК СтоимостьХраненияКГ,
	|	Пред4.СтоимостьХраненияКуб КАК СтоимостьХраненияКуб,
	|	Пред4.СтоимостьДоставки КАК СтоимостьДоставки,
	|	Пред4.ГородСП КАК ГородСП,
	|	Пред4.СтоимостьХранения + Пред4.СтоимостьДоставки КАК СтоимостьИтого,
	|	Пред4.ШК КАК ШК,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Пред4.Покупка) = ТИП(Справочник.посылки)
	|			ТОГДА Пред4.Покупка.БесплатнаяВыдача
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БесплатнаяВыдача
	|ИЗ
	|	Пред4 КАК Пред4";
	
	Запрос.Параметры.Вставить("Участник",Участник);
	Запрос.Параметры.Вставить("СвойГород",Константы.СвояТочка.Получить().ГородСП);

	Запрос.Параметры.Вставить("Период",КонецДня(Дата));
	Результат = Запрос.Выполнить();	
	Тз=Результат.Выгрузить();
	ЗаполнитьШК(Тз);
	ЗаполнитьГородаСП(ТЗ);	
	Для каждого стр из ТЗ Цикл
		если стр.габарит.НеГабарит Тогда 
			новСтрока=Покупки.Добавить();			
			ЗаполнитьЗначенияСвойств(новСтрока,стр);
				Если (ТипЗнч(новСтрока.Покупка)=Тип("СправочникСсылка.Покупки") или
					  ТипЗнч(новСтрока.Покупка)=Тип("СправочникСсылка.Пристрой"))  и
					           ЗначениеЗаполнено(новСтрока.Покупка.secureCode) Тогда
					х=новый ХешированиеДанных(ХешФункция.CRC32);
					х.Добавить(СтрЗаменить(Строка(новСтрока.Покупка.Код)+"_"+Строка(Участник.Код)+"_"+новСтрока.Покупка.secureCode," ",""));
					новСтрока.КодЗаказа=Лев(СтрЗаменить(Строка(х.ХешСумма)," ",""),4);
					
				ИначеЕсли ТипЗнч(новСтрока.Покупка)=Тип("СправочникСсылка.Посылки") и ЗначениеЗаполнено(новСтрока.Покупка.secureCode)  Тогда
					новСтрока.КодЗаказа =новСтрока.Покупка.secureCode;
				КонецЕсли;
			
		Иначе
			Для инд=1 по стр.Количество Цикл
				новСтрока=Покупки.Добавить();
				ЗаполнитьЗначенияСвойств(новСтрока,стр);
				Если (ТипЗнч(новСтрока.Покупка)=Тип("СправочникСсылка.Покупки") или
					  ТипЗнч(новСтрока.Покупка)=Тип("СправочникСсылка.Пристрой"))  и
					           ЗначениеЗаполнено(новСтрока.Покупка.secureCode) Тогда
					х=новый ХешированиеДанных(ХешФункция.CRC32);
					х.Добавить(СтрЗаменить(Строка(новСтрока.Покупка.Код)+"_"+Строка(Участник.Код)+"_"+новСтрока.Покупка.secureCode," ",""));
					новСтрока.КодЗаказа=Лев(СтрЗаменить(Строка(х.ХешСумма)," ",""),4);
					
				ИначеЕсли ТипЗнч(новСтрока.Покупка)=Тип("СправочникСсылка.Посылки") и ЗначениеЗаполнено(новСтрока.Покупка.secureCode)  Тогда
					новСтрока.КодЗаказа =новСтрока.Покупка.secureCode;
				КонецЕсли;
				новСтрока.Количество=1;
			КонецЦикла;
		КонецЕсли
	КонецЦикла;
		
	
	строкиСБесплатнойВыдачей 		= Покупки.НайтиСтроки(Новый Структура("БесплатнаяВыдача", Истина));

	Для каждого элем из Покупки Цикл
		структураРассчета = аСПНаСервере.РассчитатьСтоимостьХранения(Новый структура("Габарит, ВремяХранения, СтоимостьДоставки, БесплатнаяВыдача, вес,Объем", элем.Габарит, элем.ВремяХранения, элем.СтоимостьДоставки, элем.БесплатнаяВыдача,Элем.вес,Элем.Объем));
		
		элем.СтоимостьИтого			= структураРассчета.СтоимостьИтого;
		элем.ОплачиваетОрганизатор  = структураРассчета.ОплачиваетОрганизатор;
		элем.ОплачиваетУчастник		= структураРассчета.ОплачиваетУчастник;
	КонецЦикла;
	
	СтоимостьОплачиваетОрганизатор 	= Покупки.Итог("ОплачиваетОрганизатор");
	СтоимостьИтого 					= Покупки.Итог("СтоимостьИтого") - СтоимостьОплачиваетОрганизатор + ПоискНикаСтоимость;

	//Объект.Покупки.Загрузить(Тз);
КонецФункции


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	массСтрок = покупки.НайтиСтроки(новый структура("Оплачен",Ложь));
	Для каждого элем из массСтрок Цикл
		Если элем.Оплатить Тогда Продолжить КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Позиция № """+элем.НомерСтроки+
		""" не оплачена ";
		Сообщение.Поле="Заказы["+(элем.НомерСтроки-1)+"].Оплачен";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Отказ=Истина;		
	КонецЦикла	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =          //Проверка оплачен.неоплачен
	//	"ВЫБРАТЬ
	//	|	РасходнаяПокупки.НомерСтроки,
	//	|	РасходнаяПокупки.МестоХранения,
	//	|	РасходнаяПокупки.Покупка,
	//	|	РасходнаяПокупки.Количество
	//	|ИЗ
	//	|	Документ.Расходная.Покупки КАК РасходнаяПокупки
	//	|Где Ссылка=&Ссылка И НЕ РасходнаяПокупки.Оплачен 
	//	|И НЕ РасходнаяПокупки.Оплатить
	//	|И НЕ РасходнаяПокупки.Потерян";
	//Запрос.УстановитьПараметр("Ссылка",Ссылка);	
	//Результат = Запрос.Выполнить();

	//Выборка = Результат.Выбрать();

	//Пока Выборка.Следующий() Цикл
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Позиция № """+Выборка.НомерСтроки+
	//		 	""" не оплачена ";
	//		Сообщение.Поле="Заказы["+(Выборка.НомерСтроки-1)+"].Оплачен";
	//		Сообщение.УстановитьДанные(ЭтотОбъект);
	//		Сообщение.Сообщить();
	//		Отказ=Истина;
	//КонецЦикла;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерЧекаККМ=0;
	НомерСменыККМ=0;
	
	Архивный=Ложь;
	Статус=Перечисления.СтатусыЧековККМ.ПустаяСсылка();
	Напечатано=Ложь;
КонецПроцедуры


Процедура ЗаполнитьШК(Тз)
	массСтрок=Тз.НайтиСтроки(Новый Структура("ШК",Справочники.Мегаордера.ПустаяСсылка()));
	Свояточка=Константы.СвояТочка.Получить();
	Для каждого стр из массСтрок Цикл
		стр.ШК	= СП_Штрихкоды.ПолучитьМегаордер(стр.Покупка,Участник,Константы.СвояТочка.Получить());
	КонецЦикла;
КонецПроцедуры	

Процедура ЗаполнитьГородаСП(ТЗ)
	массШКБезГорода=тз.НайтиСтроки(новый Структура("ГородСП",Справочники.ГородаСП.ПустаяСсылка()));
	Если массШКБезГорода.количество()>0 Тогда
		сисокШК=новый СписокЗначений;
		Для каждого элем из массШКБезГорода Цикл
			сисокШК.Добавить(элем.ШК);
		КонецЦикла;
		//тз=аспПроцедурыОбменаДанными.ПолучитьИсториюЗаказов(сисокШК);
		//Результат = Запрос.Выполнить();	
		//Тз=Результат.Выгрузить();
	КонецЕсли;
КонецПроцедуры	

Функция ДобавитьТовар(Товар) Экспорт
	Если ТипЗнч(Товар) = Тип("СправочникСсылка.КартыУчастников") Тогда
		строка_товар 				= Товары.Добавить();
		строка_товар.Номенклатура 	= Товар;
		строка_товар.Количество 	= 1;
		строка_товар.Цена  			= Константы.СтоимостьКартыУчастника.Получить();
		строка_товар.Сумма  		= строка_товар.Цена*строка_товар.Количество;
		
		СтоимостьИтого=Покупки.Итог("ОплачиваетУчастник")+ПоискНикаСтоимость+Товары.Итог("Сумма");
		Возврат Истина;
	ИначеЕсли ТипЗнч(Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
		масс_Строк = Товары.НайтиСтроки(новый Структура("Номенклатура",Товар));
		Если масс_Строк.Количество()>0 тогда
			стр_товара = масс_Строк[0];
			количество_до = стр_товара.Количество;
		Иначе	
			стр_товара = Товары.Добавить();
			количество_до = 0;
		Конецесли;	
		стр_товара.Номенклатура	= Товар;
		стр_товара.Количество 	= количество_до + 1;
		стр_товара.Цена  		= Товар.Цена;
		стр_товара.Сумма  		= стр_товара.Цена*стр_товара.Количество;
	    СтоимостьИтого=Покупки.Итог("ОплачиваетУчастник")+ПоискНикаСтоимость+Товары.Итог("Сумма");

		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции	