
Процедура Печать(ТабДок, Ссылка) Экспорт

	
	Макет = Документы.ВозвратПокупокОрганизатору.ПолучитьМакет("Печать");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратПокупокОрганизатору.Дата,
	|	ВозвратПокупокОрганизатору.Номер,
	|	ВозвратПокупокОрганизатору.Участник,
	|	ВозвратПокупокОрганизатору.Покупки.(
	|		НомерСтроки,
	|		Организатор,
	|		Покупка,
	|		Покупка.Код
	|	),
	|	ВозвратПокупокОрганизатору.Участник.Код
	|ИЗ
	|	Документ.ВозвратПокупокОрганизатору КАК ВозвратПокупокОрганизатору
	|ГДЕ
	|	ВозвратПокупокОрганизатору.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПокупкиШапка = Макет.ПолучитьОбласть("ПокупкиШапка");
	ОбластьПокупки = Макет.ПолучитьОбласть("Покупки");
	ТабДок.Очистить();

//	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл
		//Если ВставлятьРазделительСтраниц Тогда
		//	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;

		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		Шапка.Параметры.Точка="точка:"+Константы.СвояТочка.Получить();
		ТабДок.Вывести(Шапка, Выборка.Уровень());

		//ТабДок.Вывести(ОбластьПокупкиШапка);
		ВыборкаПокупки = Выборка.Покупки.Выбрать();
		Пока ВыборкаПокупки.Следующий() Цикл
			ОбластьПокупки.Параметры.Заполнить(ВыборкаПокупки);
			ТабДок.Вывести(ОбластьПокупки, ВыборкаПокупки.Уровень());
		КонецЦикла;

		//ВставлятьРазделительСтраниц = Истина;
	КонецЦикла;
	//}}
КонецПроцедуры



#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	СтоСПОбмен_Общий.Получить_ТекстЗапроса_Обмен100СП_РН(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры);
	Получить_ТекстЗапроса_Расход(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверСП.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", ДокументСсылка.Дата);  
	Запрос.УстановитьПараметр("ДокументОтправления", ДокументСсылка.Основание);  
КонецПроцедуры

Функция Получить_ТекстЗапроса_Возвраты(Запрос, ТекстыЗапроса, Регистры) 
	
	ИмяРегистра = "Возвраты";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	ТекстЗапроса = 
		 "ВЫБРАТЬ
		 |	&Период КАК Период,
		 |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		 |	ВозвратПокупокОрганизаторуПокупки.Организатор КАК Организатор,
		 |	ВозвратПокупокОрганизаторуПокупки.Участник КАК Участник,
		 |	ВозвратПокупокОрганизаторуПокупки.Покупка КАК Покупка,
		 |	ВозвратПокупокОрганизаторуПокупки.МестоХранения КАК МестоХранения,
		 |	1 КАК Количество,
		 |	ВозвратПокупокОрганизаторуПокупки.Ссылка КАК Партия,
		 |	ВозвратПокупокОрганизаторуПокупки.СтоимостьВозврата КАК Сумма
		 |ИЗ
		 |	Документ.ВозвратПокупокОрганизатору.Покупки КАК ВозвратПокупокОрганизаторуПокупки
		 |ГДЕ
		 |	ВозвратПокупокОрганизаторуПокупки.Ссылка = &Ссылка";


	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
КонецФункции

Функция Получить_ТекстЗапроса_Транзит(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Транзит";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	ТекстЗапроса = "ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	Транзит.ПокупкаСсылка КАК ПокупкаСсылка,
	               |	Транзит.МестоХранения КАК МестоХранения,
	               |	Транзит.Габарит КАК Габарит,
	               |	Транзит.Участник КАК Участник,
	               |	Транзит.Точка КАК Точка,
	               |	Транзит.Партия КАК Партия,
	               |	Транзит.Количество КАК Количество
	               |ИЗ
	               |	РегистрНакопления.Транзит КАК Транзит
	               |ГДЕ
	               |	Транзит.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Коробки)
	               |	И Транзит.Регистратор = &ДокументОтправления";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция Получить_ТекстЗапроса_Расход(Запрос, ТекстыЗапроса, Регистры) Экспорт
	ИмяРегистра = "Расход";
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	ТекстЗапроса = "ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	Транзит.ПокупкаСсылка КАК Покупка,
	               |	Значение(Перечисление.ТипРасхода.Транзит) как ТипРасхода,
				   |	Истина как Списано,
	               |	Транзит.Габарит КАК Габарит,
	               |	Транзит.Участник КАК Участник,
	               |	Транзит.ПокупкаСсылка.наименование КАК ПокупкаСпр,
	               |	Транзит.Количество КАК Количество
	               |ИЗ
	               |	РегистрНакопления.Транзит КАК Транзит
	               |ГДЕ
	               |	Транзит.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И ТИПЗНАЧЕНИЯ(Транзит.ПокупкаСсылка) = ТИП(Справочник.Коробки)
	               |	И Транзит.Регистратор = &ДокументОтправления";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти


#Область Обмен100сп
Функция ПолучитьТэг_return(Ссылка,НомерСтроки=Неопределено) Экспорт
	ОтборПоСсылке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&Ссылка) "," = &Ссылка ");
	ОтборПоСтроке=?(ТипЗнч(Ссылка)=Тип("Массив")," В (&НомерСтроки) "," = &НомерСтроки ");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратПокупокОрганизаторуПокупки.Ссылка.Дата КАК Дата,
		|	ВозвратПокупокОрганизаторуПокупки.Покупка КАК Покупка,
		|	ВозвратПокупокОрганизаторуПокупки.Участник КАК Участник,
		|	ВозвратПокупокОрганизаторуПокупки.КодыТоваров,
		|	ВозвратПокупокОрганизаторуПокупки.ШК КАК ШК
		|ИЗ
		|	Документ.ВозвратПокупокОрганизатору.Покупки КАК ВозвратПокупокОрганизаторуПокупки
		|ГДЕ
		|	ВозвратПокупокОрганизаторуПокупки.Ссылка "+ОтборПоСсылке+" "+?(НомерСтроки=Неопределено,"", "
		|	И ВозвратПокупокОрганизаторуПокупки.НомерСтроки "+ОтборПоСтроке+" ");
	
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда Возврат ""; КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписьXML=новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Служебный");
	Пока Выборка.Следующий() Цикл
		//Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") и Выборка.ШК.Покупка.Состав.Количество()=0 Тогда Продолжить; КонецЕсли;
//		Если ТипЗнч(Выборка.ШК.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
//			ШК = Выборка.ШК.Покупка.Покупка.Состав[0].ШК;
//		Иначе
//			ШК= Выборка.ШК;
//		Конецесли;
		
		ШК= Выборка.ШК;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("return");
		СтоСП.Вставить_Тэг(ЗаписьXML,"date"	,				Выборка.Дата);
		Если Выборка.ШК.типМегаордера = Перечисления.типМегаордера.Посылка Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML,"packageId",           Формат(Выборка.ШК.Посылка.Код,"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.Участник.Код),"ЧГ=0"));
			СтоСП.Вставить_Тэг(ЗаписьXML,"orderType",           "package");
			СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Посылка.Организатор),ШК.Посылка.Организатор.Код,0)),"ЧГ=0"));
				
		Иначе
			СтоСП.Вставить_Тэг(ЗаписьXML,"uid"	, 				Формат(Число(Выборка.ШК.Участник.Код),"ЧГ=0"));
			СтоСПОбмен_Общий.ЗаполнитьТэгиЗаказаПо_ШК(ШК,ЗаписьXML);		
			СтоСП.Вставить_Тэг(ЗаписьXML,"orgid", 				Формат(Число(?(ЗначениеЗаполнено(ШК.Организатор),ШК.Организатор.Код,ШК.Покупка.Организатор.Код)),"ЧГ=0"));
		КонецЕсли;		
		Если Выборка.КодыТоваров <> "" Тогда
			СтоСП.Вставить_Тэг(ЗаписьXML, "ordersIds", Выборка.КодыТоваров);
		КонецЕсли;	
			
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
    ЗаписьXML.ЗаписатьКонецЭлемента();
	рез=ЗаписьXML.Закрыть();
	рез=СтрЗаменить(рез,"<Служебный>","");
	рез=СтрЗаменить(рез,"</Служебный>","");
	Возврат рез;
КонецФункции
#КонецОбласти


Функция ПолноеИмяОбъекта()
	Возврат "Документ.ВозвратПокупокОрганизатору";
КонецФункции


Процедура ЗаполнитьПустыеШКвТабЧасти(ОбъектВозврата)  Экспорт 
	//строки_безШК=ОбъектВозврата.Покупки.НайтиСтроки(новый Структура("ШК",Справочники.Мегаордера.ПустаяСсылка()));	
	Для каждого стр из ОбъектВозврата.Покупки Цикл
		стр_Участник = ?(ЗначениеЗаполнено(стр.Участник),стр.Участник,ОбъектВозврата.Участник);
		стр_Покупка  = стр.Покупка;
		
		стр.ШК=СП_Штрихкоды.ПолучитьМегаордер(стр_Покупка,стр_Участник);
		Если не ЗначениеЗаполнено(стр.ШК.Участник) Тогда
			об=стр.ШК.ПолучитьОбъект();
			об.Участник=Справочники.Участники.нулевой   ;
			об.Записать();
		КонецЕсли;
		Если не ЗначениеЗаполнено(стр.ШК.Организатор) Тогда
			об=стр.ШК.ПолучитьОбъект();
			об.Организатор=стр.Организатор   ;
			об.Записать();
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры	
