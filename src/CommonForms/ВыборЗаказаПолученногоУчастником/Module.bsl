
&НаКлиенте
Процедура ПолучитьЗаказы(Команда)
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(Участник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать ""Участника""",,"Участник");
		Отказ = истина;
	КонецЕсли;	
	Если не ЗначениеЗаполнено(ДатаВыдачи) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать ""ДатаВыдачи""",,"ДатаВыдачи");
		Отказ = истина;
	КонецЕсли;	
	Если отказ тогда Возврат КонецЕсли;	
	Если Локально Тогда
		ЗаполнитьЗаказамиВыданнвмиУчастникуЛокально();
	Иначе
		ЗаполнитьЗаказамиВыданнымиУчастникуДанныеСайта();
	КонецЕсли;	
	
	ЗаполнитьПустыеШтрихКоды();
КонецПроцедуры

Процедура ЗаполнитьПустыеШтрихКоды()
	строки_безШК	= Посылки.НайтиСтроки(новый Структура("ШК",Справочники.Мегаордера.ПустаяСсылка()));	
	Для каждого стр из строки_безШК Цикл
		стр.ШК=СП_Штрихкоды.ПолучитьМегаордер(стр.Посылка);
	КонецЦикла;	
КонецПроцедуры	


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДниВозврата = Константы.ДниВозврата.Получить();
	Участник = Параметры.Участник;
	Локально = Параметры.Локально;
	Если ЗначениеЗаполнено(Параметры.ДатаВыдачи) Тогда
		ДатаВыдачи = параметры.ДатаВыдачи;
	Иначе
		ДатаВыдачи = ТекущаяДата() - ДниВозврата* 24*60*60;
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьЗаказамиВыданнымиУчастникуДанныеСайта()
	ВыданныеПокупки_ССайта=СтоСПОбмен_Возвраты.Загрузить_ВыданныеПокупки(Участник, ДатаВыдачи);
	Если ВыданныеПокупки_ССайта.авторизацияВыполнена Тогда
		тз =  ВыданныеПокупки_ССайта.результат;
		тз.Сортировать("ДатаВыдачи Убыв");
		
		Для Каждого элем из тз Цикл
			новаяСтрока	= Посылки.Добавить();
			новаяСтрока.Посылка 	= элем.Покупка;
			новаяСтрока.Организатор = элем.Покупка.Организатор;
			новаяСтрока.ДатаВыдачи 	= элем.ДатаВыдачи;
			новаяСтрока.ПунктВыдачи = элем.ПунктВыдачи;
			
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаполнитьЗаказамиВыданнвмиУчастникуЛокально()	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТоваровОбороты.Покупка КАК Посылка,
		|	ОстаткиТоваровОбороты.Период КАК ДатаВыдачи
		|ПОМЕСТИТЬ втСбор
		|ИЗ
		|	РегистрНакопления.ОстаткиТоваров.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Участник = &Участник) КАК
		|		ОстаткиТоваровОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТранзитОбороты.ПокупкаСсылка,
		|	ТранзитОбороты.Период
		|ИЗ
		|	РегистрНакопления.Транзит.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Участник = &Участник) КАК ТранзитОбороты
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСбор.Посылка КАК Посылка,
		|	втСбор.Посылка.Организатор КАК Организатор,
		|	МАКСИМУМ(втСбор.ДатаВыдачи) КАК ДатаВыдачи,
		|	втСбор.Посылка.ПунктВыдачи КАК ПунктВыдачи
		|ИЗ
		|	втСбор КАК втСбор
		|СГРУППИРОВАТЬ ПО
		|	втСбор.Посылка,
		|	втСбор.Посылка.Организатор,
		|	втСбор.Посылка.ПунктВыдачи
		|УПОРЯДОЧИТЬ ПО
		|	МАКСИМУМ(втСбор.ДатаВыдачи) УБЫВ";

	Запрос.УстановитьПараметр("Участник", 		Участник);
    Запрос.УстановитьПараметр("ДатаНачала", 	ДатаВыдачи);                                       
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

    Посылки.Загрузить(Результат.Выгрузить());
КонецПроцедуры


&НаКлиенте
Процедура Выбрать(Команда)
	Если элементы.посылки.ТекущиеДанные = неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо выбрать посылку!");
		Возврат;
	КонецЕсли;	
	
	Закрыть(Элементы.Посылки.ТекущиеДанные.ШК);
	//Закрыть(Новый Структура("Посылка, Организатор, ШК",Элементы.Посылки.ТекущиеДанные.Посылка, Элементы.Посылки.ТекущиеДанные.Организатор, Элементы.Посылки.ТекущиеДанные.ШК));
КонецПроцедуры

