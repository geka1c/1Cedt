Процедура ПриСозданииНаСервере(ЭтотОбъект) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЭтотОбъект.Объект.Свойство("ТочкаОтправитель") и не ЗначениеЗаполнено(ЭтотОбъект.Объект["ТочкаОтправитель"]) Тогда
		ЭтотОбъект.Объект["ТочкаОтправитель"] 	= Константы.СвояТочка.Получить();
	КонецЕсли;	
	Если ЭтотОбъект.Объект.Свойство("СвояТочка") 		и не ЗначениеЗаполнено(ЭтотОбъект.Объект.СвояТочка) Тогда
		ЭтотОбъект.Объект.СвояТочка			= Константы.СвояТочка.Получить();
	КонецЕсли;

	
КонецПроцедуры	



Функция 	ЗаполнитьФорму(Форма,Параметры) Экспорт
	Для каждого стр из Параметры Цикл
		Если ТипЗнч(стр.Значение)=тип("Структура") Тогда
			новСтр=Форма[стр.Ключ].Добавить();
			Для каждого элем Из стр.Значение Цикл
				Если новСтр.Свойство(элем.Ключ) ТОгда
					новСтр[элем.Ключ]=элем.Значение;
				КонецЕсли;
			КонецЦикла;	
		Иначе	
			Форма[стр.Ключ]=стр.Значение;	
		КонецЕсли;	
	КонецЦикла;
КонецФункции

Процедура 	ЗаполнитьФорму_Расходная_ОстаткамиТоваров(НовыйОбъект) Экспорт
		расх=ДанныеФормыВЗначение(НовыйОбъект,Тип("ДокументОбъект.Расходная"));
		расх.заполнитьОстатками();
		ЗначениеВДанныеФормы(расх,НовыйОбъект);
КонецПроцедуры	




// Расчитать стимость хранения всоответствии с габаритом
//
// Параметры:
//  Параметры  - Структура - В составе поля: Партия, Габарит, Вес, Объем, Количество
//  датаВыдачи - Дата - для расчетавремени хранения
//
// Возвращаемое значение:
//   Структура   - содержит ВремяХранения, СтоимостьХранения
//
Функция ПолучитьСтоимостьХранения(Параметры,датаВыдачи) Экспорт
	СтоимостьХранения   = 0;
	Если 	ТипЗнч(Параметры.Покупка)  = Тип("СправочникСсылка.Мегаордера") и
			Параметры.Покупка.ТипМегаордера = Перечисления.типМегаордера.Супергруппа Тогда
		ВремяХранения		= аСПНаСервере.РазностьДат(датаВыдачи,Параметры.Партия.Дата);	
		СтоимостьХранения   = Параметры.Партия.СтоимостьИтого;
		Возврат Новый Структура("ВремяХранения, СтоимостьХранения",ВремяХранения, СтоимостьХранения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Партия) Тогда
		ВремяХранения		= аСПНаСервере.РазностьДат(датаВыдачи,Параметры.Партия.Дата);
		Если Параметры.Габарит.Негабарит Тогда
			СтоимостьХранения=Макс(Параметры.Габарит.стоимостьКуб*Параметры.Объем,Параметры.Габарит.стоимостьКГ*Параметры.Вес)
		Иначе	
			СтоимостьХранения=Параметры.Габарит.СтоимостьХранения;
		КонецЕсли;
		ХранитсяНаСкладе=Параметры.Габарит.ДниХранения;
		если ВремяХранения>ХранитсяНаСкладе тогда
			СтоимостьХранения=стоимостьХранения+(ВремяХранения-Параметры.Габарит.ДниХранения)*Параметры.Габарит.ДобавочнаяСтоимость ;
		КонецЕсли;
		СтоимостьХранения=СтоимостьХранения*Параметры.Количество;
	Иначе
		ВремяХранения=0;
	Конецесли;
	СтоимостьХранения = СтоимостьХранения * ?((ЗначениеЗаполнено(Параметры.Габарит) и Параметры.Габарит.ЗабираетКурьер),-1,1);
    Возврат Новый Структура("ВремяХранения, СтоимостьХранения",ВремяХранения, СтоимостьХранения);
КонецФункции	


Функция Получить_ПоследнееМестоХранения(ТабЧастьСМестомХранения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокуиентЗапроса.МестоХранения
		|ИЗ
		|	"+ТабЧастьСМестомХранения+" КАК ДокуиентЗапроса
		|ГДЕ
		|	ДокуиентЗапроса.МестоХранения <> ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокуиентЗапроса.Ссылка.Дата УБЫВ,
		|	ДокуиентЗапроса.Ссылка.Номер УБЫВ,
		|	ДокуиентЗапроса.НомерСтроки УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.МестоХранения;
	КонецЕсли;
	Возврат Справочники.МестаХранения.ПустаяСсылка();
КонецФункции


////////////////////////////////////////////////////

Функция 	СформироватьДокумент_Продажа(Номенклатура)  Экспорт
	обПродажа			= Документы.Продажа.СоздатьДокумент();
	Если  ТипЗнч(Номенклатура)=Тип("СправочникСсылка.КартыУчастников") Тогда
		обПродажа.Участник	= Номенклатура.Владелец;
	КонецЕсли;	
	обПродажа.Дата		= ТекущаяДата();
	обПродажа.ДобавитьТовар(Номенклатура);
	Попытка
		обПродажа.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
		Возврат обПродажа.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать документ ""Продажа""");
		Возврат Неопределено
	КонецПопытки;
КонецФункции

функция  СформироватьДокумент_ЗаполнитьСупергруппу(Супергруппа) Экспорт

	
	документ					= Документы.ЗаполнитьСупергруппу.СоздатьДокумент();
	документ.Супергруппа		= Супергруппа;
	документ.Дата 				= ТекущаяДата();
	документ.ДокументОснование 	= Супергруппа.Накладная;
	документ.ТочкаНазначения	= Супергруппа.ПунктВыдачи;
	документ.Комментарий		= "Записан автоматически при создании супергруппы";
	Попытка
	    документ.Записать(РежимЗаписиДокумента.Проведение);
		возврат документ.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось заполнить супергруппу: "+Супергруппа+". "+ОписаниеОшибки());	
	КонецПопытки;
	возврат Неопределено;
КонецФункции	



//Процедура Заполнить_МестоХранения_Габарит(ЭтотОбъект) Экспорт 
//	ТекПользователь	= ПользователиКлиентСервер.ТекущийПользователь();
//	
//	//Если ЭтотОбъект.ИмяФормы = "Документ.ОтправлениеТранзита.Форма.ФормаДокумента" Тогда
//	//	ЭтотОбъект.Объект.МестоХранения	
//	//	ЭтотОбъект.Объект.Габарит
//	//КонецЕсли;
//	//Если ЗначениеЗаполнено(ТочкаНазначения) Тогда
//	//	СтруктураВозврата.Габарит			=?(не ЗначениеЗаполнено(СтруктураВозврата.Габарит)
//	//											,ТочкаНазначения.Габарит,СтруктураВозврата.Габарит);
//	//	СтруктураВозврата.МестоХранения		=?(не ЗначениеЗаполнено(СтруктураВозврата.МестоХранения)
//	//											,ТочкаНазначения.МестоХранения,СтруктураВозврата.МестоХранения);
//	//	СтруктураВозврата.ТарифПВ	= ТочкаНазначения.ТарифПВ;
//	//	СтруктураВозврата.ТарифПВнп	= ТочкаНазначения.ТарифПВнп;
//	//	СтруктураВозврата.Процент	= ТочкаНазначения.Процент;
//	//	СтруктураВозврата.ПроцентОС	= ТочкаНазначения.ПроцентОС;
//	//КонецЕсли;	

//	
//	
//КонецПроцедуры	