//Регламентный пересчет состояния Групп доставки
//  ПередаемНаТранзитКурьера
//  ЗаполняемНаличие
//  ЗаполняемСтатусГруза
Процедура РасчитатьОстаткиПоГруппамДоставки() Экспорт
	
#Область ПередаемНаТранзитКурьера
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоробкиСостав.Ссылка КАК Ссылка,
		|	КоробкиСостав.Покупка КАК Покупка,
		|	КоробкиСостав.Участник КАК Участник,
		|	КоробкиСостав.КодЗаказа КАК КодЗаказа,
		|	КоробкиСостав.Ссылка.ТочкаНазначения КАК ТочкаНазначения,
		|	КоробкиСостав.Исключить КАК Исключить
		|ПОМЕСТИТЬ ЗаказыВГруппах
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForOrders)
		|	И КоробкиСостав.Ссылка.ТочкаНазначения = &ТочкаНазначения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыВГруппах.Ссылка КАК Ссылка,
		|	ЗаказыВГруппах.Покупка КАК Покупка,
		|	ЗаказыВГруппах.Участник КАК Участник,
		|	ЗаказыВГруппах.ТочкаНазначения КАК ТочкаНазначения,
		|	ЗаказыВГруппах.Исключить КАК Исключить
		|ПОМЕСТИТЬ ЗаказыИПосылкиВГруппах
		|ИЗ
		|	ЗаказыВГруппах КАК ЗаказыВГруппах
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказыВГруппах.Ссылка,
		|	СтоСП_ПосылкиЗаказа.Посылка,
		|	ЗаказыВГруппах.Участник,
		|	ЗаказыВГруппах.ТочкаНазначения,
		|	ЗаказыВГруппах.Исключить
		|ИЗ
		|	ЗаказыВГруппах КАК ЗаказыВГруппах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтоСП_ПосылкиЗаказа КАК СтоСП_ПосылкиЗаказа
		|		ПО ЗаказыВГруппах.Покупка = СтоСП_ПосылкиЗаказа.Покупка
		|			И ЗаказыВГруппах.Участник = СтоСП_ПосылкиЗаказа.Участник
		|			И ЗаказыВГруппах.КодЗаказа = СтоСП_ПосылкиЗаказа.КодЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыИПосылкиВГруппах.Ссылка КАК Ссылка,
		|	ЗаказыИПосылкиВГруппах.Ссылка КАК ГруппаДоставки,
		|	ЗаказыИПосылкиВГруппах.Покупка КАК Покупка,
		|	ЗаказыИПосылкиВГруппах.Участник КАК Участник,
		|	ОстаткиТоваровОстатки.Партия КАК Партия,
		|	ЕСТЬNULL(ОстаткиТоваровОстатки.КоличествоОстаток, 0) КАК Количество,
		|	ОстаткиТоваровОстатки.Потерян КАК Потерян,
		|	ОстаткиТоваровОстатки.Оплачен КАК Оплачен,
		|	ОстаткиТоваровОстатки.МестоХранения КАК МестоХранения,
		|	ОстаткиТоваровОстатки.Габарит КАК Габарит
		|ИЗ
		|	ЗаказыИПосылкиВГруппах КАК ЗаказыИПосылкиВГруппах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиТоваров.Остатки(
		|				,
		|				(Участник, Покупка) В
		|					(ВЫБРАТЬ
		|						ЗаказыИПосылкиВГруппах.Участник,
		|						ЗаказыИПосылкиВГруппах.Покупка
		|					ИЗ
		|						ЗаказыИПосылкиВГруппах КАК ЗаказыИПосылкиВГруппах)) КАК ОстаткиТоваровОстатки
		|		ПО ЗаказыИПосылкиВГруппах.Покупка = ОстаткиТоваровОстатки.Покупка
		|			И ЗаказыИПосылкиВГруппах.Участник = ОстаткиТоваровОстатки.Участник";
	
	ТочкаНазначения 	= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0100");
	Запрос.Параметры.Вставить("ТочкаНазначения",ТочкаНазначения);	
	РезультатЗапроса 	= Запрос.Выполнить();
	
	тз= РезультатЗапроса.Выгрузить();
	массНтНаСкладе=тз.НайтиСтроки(новый Структура("Количество",0));
	Если массНтНаСкладе.Количество()>0 Тогда
		//ТекстОшибки="При передаче заказов на Курьерскую доставку не найдено на складе:"+Символы.ПС;
		Для каждого стр из массНтНаСкладе Цикл
		//	ТекстОшибки=ТекстОшибки+"для "+стр.Ссылка+": участник - "+стр.Участник+": покупка - "+стр.Покупка+Символы.ПС;
			тз.Удалить(стр);
		КонецЦикла;	
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

	
	Если тз.Количество()>0 Тогда
		докДвижение=Документы.Движение.СоздатьДокумент();
		докДвижение.Дата=ТекущаяДата();
		докДвижение.ТочкаНазначения=ТочкаНазначения;
		докДвижение.Комментарий="Передано на курьерскую доставку";
		докДвижение.ТипДвижения=Перечисления.ТипыДвиженияПокупок.ПередачаНаТранзит;
		докДвижение.Покупки.Загрузить(тз);
		Попытка
			докДвижение.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
	КонецЕсли;


	

#КонецОбласти


#Область ЗаполняемНаличие	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	   //В составе группы не может быть посылки
	   
	   //Нельзя сделать как у курьеров через РС с составом  заказов в посылках, тк
	   //РС заполняется при одиночной загрузке группы когда все посылки уже на складе
	   //и могут подгрузиться все посылки заказа
	   
	   //При Доставке тк Группы подгружаются заранее и еще не известно сколько у группы будет посылок
	   //Поэтому Все посылки на тк приходуются паралельно своим составом в РН ЗаказыВПосылках
	   //ПЕрвый запрос в обединении получает заказы Которые поступили не в посылках из транзита
	   //Второй ищет заказы которые поступили в посылках в РН ЗаказыВПосылках()
	   
	   
	   
		"ВЫБРАТЬ
		|	КоробкиСостав.Ссылка КАК Ссылка,
		|	КоробкиСостав.Покупка КАК Покупка,
		|	КоробкиСостав.Участник КАК Участник,
		|	КоробкиСостав.КодЗаказа КАК КодЗаказа,
		|	КоробкиСостав.Ссылка.ТочкаНазначения КАК ТочкаНазначения,
		|	КоробкиСостав.Исключить КАК Исключить
		|ПОМЕСТИТЬ ЗаказыВГруппах
		|ИЗ
		|	Справочник.Коробки.Состав КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И (КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForOrders)
		|			ИЛИ КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForDelay))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТранзитОстатки.Партия.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ПартияДата,
		|	ЗаказыВГруппах.Ссылка КАК Ссылка,
		|	ЗаказыВГруппах.Покупка КАК Покупка,
		|	ЗаказыВГруппах.Участник КАК Участник,
		|	"""" КАК КодЗаказа,
		|	ЗаказыВГруппах.ТочкаНазначения КАК ТочкаНазначения,
		|	ТранзитОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ТранзитОстатки.Партия.Дата ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Количество
		|ПОМЕСТИТЬ СОстатками
		|ИЗ
		|	ЗаказыВГруппах КАК ЗаказыВГруппах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Транзит.Остатки(
		|				,
		|				(Участник, ПокупкаСсылка) В
		|					(ВЫБРАТЬ
		|						ЗаказыВГруппах.Участник,
		|						ЗаказыВГруппах.Покупка
		|					ИЗ
		|						ЗаказыВГруппах КАК ЗаказыВГруппах)) КАК ТранзитОстатки
		|		ПО ЗаказыВГруппах.Покупка = ТранзитОстатки.ПокупкаСсылка
		|			И ЗаказыВГруппах.Участник = ТранзитОстатки.Участник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗаказыВПосылкахОстатки.Партия.Дата, ДАТАВРЕМЯ(1, 1, 1)),
		|	ЗаказыВГруппах.Ссылка,
		|	ЗаказыВГруппах.Покупка,
		|	ЗаказыВГруппах.Участник,
		|	ЗаказыВГруппах.КодЗаказа,
		|	ЗаказыВГруппах.ТочкаНазначения,
		|	ЗаказыВПосылкахОстатки.КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ЗаказыВПосылкахОстатки.Партия.Дата ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|ИЗ
		|	ЗаказыВГруппах КАК ЗаказыВГруппах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыВПосылках.Остатки(
		|				,
		|				(Участник, Покупка, КодЗаказа) В
		|					(ВЫБРАТЬ
		|						ЗаказыВГруппах.Участник,
		|						ЗаказыВГруппах.Покупка,
		|						ЗаказыВГруппах.КодЗаказа
		|					ИЗ
		|						ЗаказыВГруппах КАК ЗаказыВГруппах)) КАК ЗаказыВПосылкахОстатки
		|		ПО ЗаказыВГруппах.Покупка = ЗаказыВПосылкахОстатки.Покупка
		|			И ЗаказыВГруппах.Участник = ЗаказыВПосылкахОстатки.Участник
		|			И ЗаказыВГруппах.КодЗаказа = ЗаказыВПосылкахОстатки.КодЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СОстатками.Ссылка КАК ГруппаДоставки,
		|	МАКСИМУМ(СОстатками.ПартияДата) КАК ДатаПоследнегоПоступления,
		|	МИНИМУМ(СОстатками.ПартияДата) КАК ПартияДата,
		|	МАКСИМУМ(СОстатками.Количество) КАК Количество,
		|	СОстатками.Участник КАК Участник,
		|	СОстатками.Покупка КАК Покупка,
		|	СОстатками.КодЗаказа КАК КодЗаказа
		|ПОМЕСТИТЬ пред
		|ИЗ
		|	СОстатками КАК СОстатками
		|ГДЕ
		|	НЕ СОстатками.ПартияДата ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	СОстатками.Ссылка,
		|	СОстатками.Участник,
		|	СОстатками.Покупка,
		|	СОстатками.КодЗаказа
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(СОстатками.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	пред.ГруппаДоставки КАК ГруппаДоставки,
		|	МАКСИМУМ(пред.ДатаПоследнегоПоступления) КАК ДатаПоследнегоПоступления,
		|	МИНИМУМ(пред.ПартияДата) КАК ПартияДата,
		|	СУММА(пред.Количество) КАК Количество
		|ПОМЕСТИТЬ Пред2
		|ИЗ
		|	пред КАК пред
		|
		|СГРУППИРОВАТЬ ПО
		|	пред.ГруппаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пред2.ГруппаДоставки КАК ГруппаДоставки,
		|	Пред2.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
		|	Пред2.ПартияДата КАК ПартияДата,
		|	Пред2.Количество КАК Количество
		|ИЗ
		|	Пред2 КАК Пред2
		|ГДЕ
		|	(Пред2.ГруппаДоставки.ДатаПервогоПоступления <> Пред2.ПартияДата
		|			ИЛИ Пред2.ГруппаДоставки.КоличествоНаСкладе <> Пред2.Количество)";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		обГД	= Выборка.ГруппаДоставки.ПолучитьОбъект();
		обГД.ДатаПервогоПоступления		= Выборка.ПартияДата;
		обГД.ДатаПоследнегоПоступления	= Выборка.ДатаПоследнегоПоступления;
		обГД.КоличествоНаСкладе			= Выборка.Количество;
		Попытка
		    обГД.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
#КонецОбласти	

#Область ЗаполняемСтатусГруза
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоробкиСостав.Ссылка КАК ГД
		|ПОМЕСТИТЬ ГруппыДоставки
		|ИЗ
		|	Справочник.Коробки КАК КоробкиСостав
		|ГДЕ
		|	КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.shipment)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыДоставкиСрезПоследних.Груз КАК ГруппаДоставки,
		|	СтатусыДоставкиСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыДоставки.СрезПоследних(
		|			,
		|			Груз В
		|				(ВЫБРАТЬ
		|					ГруппыДоставки.ГД
		|				ИЗ
		|					ГруппыДоставки КАК ГруппыДоставки)) КАК СтатусыДоставкиСрезПоследних
		|ГДЕ
		|	СтатусыДоставкиСрезПоследних.Груз.СтатусГруза <> СтатусыДоставкиСрезПоследних.Статус";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		обГД=Выборка.ГруппаДоставки.ПолучитьОбъект();
		обГД.СтатусГруза=Выборка.Статус;
		Попытка
		    обГД.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;

#КонецОбласти


#Область УбираемИзКоличестваИсключенныеИудаленные
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	КоробкиСостав.Ссылка КАК Ссылка
	//	|ПОМЕСТИТЬ ВыборкГрупп
	//	|ИЗ
	//	|	Справочник.Коробки.Состав КАК КоробкиСостав
	//	|ГДЕ
	//	|	КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	//	|	И (КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForOrders)
	//	|			ИЛИ КоробкиСостав.Ссылка.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.waitForDelay))
	//	|	И (КоробкиСостав.Исключить
	//	|			ИЛИ КоробкиСостав.Удалить)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	КоробкиСостав.Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	КоробкиСостав.Ссылка КАК Коробка,
	//	|	СУММА(ВЫБОР
	//	|			КОГДА КоробкиСостав.Исключить
	//	|					ИЛИ КоробкиСостав.Удалить
	//	|				ТОГДА 1
	//	|			ИНАЧЕ 0
	//	|		КОНЕЦ) КАК КоличествоИсключенных,
	//	|	СУММА(1) КАК КоличествоВсего
	//	|ПОМЕСТИТЬ СборКоличества
	//	|ИЗ
	//	|	Справочник.Коробки.Состав КАК КоробкиСостав
	//	|ГДЕ
	//	|	КоробкиСостав.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				ВыборкГрупп.Ссылка КАК Ссылка
	//	|			ИЗ
	//	|				ВыборкГрупп КАК ВыборкГрупп)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	КоробкиСостав.Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СборКоличества.Коробка КАК Коробка,
	//	|	СборКоличества.КоличествоИсключенных КАК КоличествоИсключенных,
	//	|	СборКоличества.КоличествоВсего КАК КоличествоВсего
	//	|ИЗ
	//	|	СборКоличества КАК СборКоличества
	//	|ГДЕ
	//	|	СборКоличества.Коробка.Количество <> СборКоличества.КоличествоВсего - СборКоличества.КоличествоИсключенных";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	обГД=Выборка.ГруппаДоставки.ПолучитьОбъект();
	//	обГД.Количество=Выборка.КоличествоВсего-Выборка.КоличествоИсключенных;
	//	Попытка
	//	    обГД.Записать();
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
#КонецОБласти


#Область ЧистимКоличествоЗаказовВПустыхГруппах
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Коробки.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Справочник.Коробки КАК Коробки
	//	|ГДЕ
	//	|	Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	//	|	И Коробки.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.empty)
	//	|	И Коробки.КоличествоНаСкладе > 0";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	обКоробка=Выборка.Ссылка.ПолучитьОбъект();
	//	обКоробка.КоличествоНаСкладе=0;
	//	обКоробка.ОтправлениеТранзита=Документы.ОтправлениеТранзита.ПустаяСсылка();
	//	Попытка
	//		обКоробка.Записать()
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
#КонецОбласти

#Область УдаляемДвиженияПустыхГрупп
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Коробки.ОтправлениеТранзита КАК ОтправлениеТранзита
	//	|ИЗ
	//	|	Справочник.Коробки КАК Коробки
	//	|ГДЕ
	//	|	Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
	//	|	И Коробки.СтатусГруппыДоставки = ЗНАЧЕНИЕ(Перечисление.СтатусыГруппыДоставки.empty)
	//	|	И Коробки.ОтправлениеТранзита <> ЗНАЧЕНИЕ(Документ.ОтправлениеТранзита.ПустаяСсылка)
	//	|	И НЕ Коробки.ОтправлениеТранзита.ПометкаУдаления
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Коробки.ОтправлениеТранзита";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	об=ВыборкаДетальныеЗаписи.ОтправлениеТранзита.ПолучитьОбъект();
	//	об.УстановитьПометкуУдаления(Истина);
	//КонецЦикла;
#КонецОбласти
КонецПроцедуры

