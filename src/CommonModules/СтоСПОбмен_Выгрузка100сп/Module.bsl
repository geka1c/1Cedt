// Выгрузка на сайт 100СП 
//
// Параметры:
//  хмл_отправили - Строка - xml строка выгрузки информации на сайт
// Возвращаемое значение: - Структура - поля:
//   авторизацияВыполнена	- Булево - Прошла авторизация на сайте
//   incomes - ТаблицаЗначений - Приходы
//   superGroups - ТаблицаЗначений, Супергруппы (Создание)
//	 superGroupReceipts - ТаблицаЗначений, Регистрация супергрупп (на конечной точке)
//   superGroupStages - ТаблицаЗначений, Редактирование колена маршрута супергруппы
//	 	
Функция Выгрузить(хмл_отправили) Экспорт
	
	стр_Результат=новый Структура;
	хмл_получили =ПолученныеДанные(хмл_отправили);
	Если хмл_получили=Неопределено Тогда 
		стр_Результат.Вставить("Получили","Не удалось соединиться с сайтом");
	Иначе	
		стр_Результат.Вставить("Получили",хмл_получили);
		стр_Разбор=Разбор(хмл_получили);
		стр_Результат.Вставить("Разбор",стр_Разбор);
	КонецЕсли;

	Возврат стр_Результат;
КонецФункции	



Функция ПолученныеДанные(ДанныеXML)
	Параметры    = новый Структура;
	Параметры.Вставить("token",Константы.Токен.Получить());
	Параметры.Вставить("xml", ДанныеXML);
	АдресСкрипта = Константы.АдресВыгрузкиНасайт.Получить();

	ПолученныйФайл=СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	Если ПолученныйФайл=Неопределено Тогда Возврат Неопределено КонецЕсли;

	ПолученныеДанные=СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
	Возврат ПолученныеДанные;
КонецФункции	


 

// Преобразует xml с сайта в структуру таблиц
//
// Параметры:
//  ПолученныеДанные  - Строка - xml строка полученная с сайта 100сп после выгрузки 
//
// Возвращаемое значение:
//   структура   - структура таблтиц ответов на выгрузку
//
//   авторизацияВыполнена	- Прошла авторизация на сайте
//   incomes                -  Приходы
//   superGroups            -  Супергруппы (Создание)
//	 superGroupReceipts     -  Регистрация супергрупп (на конечной точке)
//   superGroupStages       -  Редактирование колена маршрута супергруппы
//	 	
Функция Разбор(ПолученныеДанные)
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"uid=""""","uid=""0""");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstPid></firstPid>","<firstPid>0</firstPid>");
    ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstPid/>","<firstPid>0</firstPid>");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"<firstIncomeCode/>","<firstIncomeCode>0</firstIncomeCode>");
	ПолученныеДанные = СтрЗаменить(ПолученныеДанные,"packageId=""""","packageId=""0""");
	
	
	
	стр_Результат=Новый Структура;

	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	авторизацияВыполнена=ложь;
	Тип_distributors=ФабрикаXDTO.Тип(пространствоИмен, "distributors");
		
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru","http://www.100sp.ru/api/distributor/upload/back");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	
	Если Объект_distributors.incomes<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.incomes.income);
		стр_Результат.Вставить("incomes",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.deliveries<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.deliveries.delivery);
		стр_Результат.Вставить("deliveries",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.transfers<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.transfers.transfer);
		стр_Результат.Вставить("transfers",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.returns<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.returns.return);
		стр_Результат.Вставить("returns",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.discards<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.discards.discard);
		стр_Результат.Вставить("discards",ТЗ);
	КонецЕсли;
	
	
	Если Объект_distributors.superGroups<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.superGroups.superGroup);
		стр_Результат.Вставить("superGroups",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.superGroupReceipts<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.superGroupReceipts.superGroupReceipt);
		стр_Результат.Вставить("superGroupReceipts",ТЗ);
	КонецЕсли;
	
	Если Объект_distributors.superGroupStages<>Неопределено Тогда
		ТЗ=СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.superGroupStages.superGroupStage);
		стр_Результат.Вставить("superGroupStages",ТЗ);
	КонецЕсли;
	
	
	
	стр_Результат.Вставить("авторизацияВыполнена",авторизацияВыполнена);
	Возврат стр_Результат;
КонецФункции


Функция СтруктураПротокола() Экспорт
	Возврат новый Структура ("ДатаНачала, ДатаОкончания,Описание, Отправили, Результат, ПолученныеДанные");
КонецФункции	

Процедура  	СохранитьПротоколОбмена(СтрокаПротокола,Документ) Экспорт
	мз					= РегистрыСведений.ПротоколыОбмена.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(мз, СтрокаПротокола);
	мз.Период			= СтрокаПротокола.ДатаНачала;
	мз.Документ			= Документ;
	мз.ДатаОкончания	= СтрокаПротокола.ДатаОкончания;
	мз.Результат		= СтрокаПротокола.Результат;
	мз.ПолученныеДанные	= СтрокаПротокола.ПолученныеДанные;
	мз.Записать();
КонецПроцедуры	