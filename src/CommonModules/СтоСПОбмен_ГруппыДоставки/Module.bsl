#Область ЗагрузкаПоДате

Функция Получить_ПоДате(ДатаЗагрузки	= неопределено) Экспорт
	хмл_отправили 		= ХМЛ_ГруппыПоДате(ДатаЗагрузки);
	хмл_получили 		= ПолученныеДанные(хмл_отправили);
	
	результатРазбора 	= Разбор_ПолученныхГрупп(хмл_получили);
	
	Если результатРазбора.АвторизацияВыполнена Тогда
		
		массивТипов = новый Массив();
		массивТипов.Добавить("СправочникСсылка.Коробки");
		массивТипов.Добавить("ДокументСсылка.КурьерскаяДостаука");
		
		кол = результатРазбора.deliveryGroups.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(массивТипов));
		Обновить_ГруппыДоставки_ПоКодуДате(результатРазбора.deliveryGroups);
	Конецесли;
	
	массГрупп			= результатРазбора.deliveryGroups.ВыгрузитьКолонку("Ссылка");
	
	Возврат массГрупп;
КонецФункции

Функция ХМЛ_ГруппыПоДате(ДатаЗагрузки) 
	Тип_dataByDates						= ФабрикаXDTO.Тип("http://www.100sp.ru/out","dataByDates");
	Тип_distributors					= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_dataByDates					= ФабрикаXDTO.Создать(Тип_dataByDates);
	Объект_dataByDates.deliveryGroups	= ?(ДатаЗагрузки = Неопределено, Справочники.ПараметрыОбмена.ГруппыДоставки.ДатаЗагрузки , ДатаЗагрузки);
	
	Объект_distributors					= ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.dataByDates		= Объект_dataByDates;
	
	Запись				= Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML 			= Запись.Закрыть();
	ДанныеXML			= "<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

#КонецОбласти

#Область ЗагрузкаГруппПоКодам

Процедура ЗагрузитьСоставПосылокКурьерскойДоставки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Коробки.Ссылка.Код КАК Код
		|ИЗ
		|	Справочник.Коробки КАК Коробки
		|ГДЕ
		|	Коробки.ВидСтикера 				= Значение(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И Коробки.ТочкаНазначения 		= &ТочкаНазначения
		|	И Коробки.СтатусГруппыДоставки 	= Значение(Перечисление.СтатусыГруппыДоставки.waitForOrders)";
	
	Запрос.УстановитьПараметр("ТочкаНазначения", СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду("0100"));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	СписокКодов = новый СписокЗначений;
	СписокКодов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Код"));
	
	Загрузить_ПоКодам(СписокКодов);
КонецПроцедуры	


Процедура ПолучитьГруппыДоставкиСпризнаком_Догрузить() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Коробки.Ссылка.Код КАК Код
		|ИЗ
		|	Справочник.Коробки КАК Коробки
		|ГДЕ
		|	Коробки.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки)
		|	И Коробки.Догрузить
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КурьерскаяДоставка.Номер
		|ИЗ
		|	Документ.КурьерскаяДоставка КАК КурьерскаяДоставка
		|ГДЕ
		|	КурьерскаяДоставка.Догрузить";
	

	
	РезультатЗапроса = Запрос.Выполнить();
	СписокКодов = новый СписокЗначений;
	СписокКодов.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Код"));
	
	Загрузить_ПоКодам(СписокКодов);
КонецПроцедуры

Функция Загрузить_ПоКодам(КодыГрупп, Интерактивно = Ложь) Экспорт
	Если КодыГрупп.Количество()=0 Тогда Возврат Ложь; КонецЕсли;
	хмл_отправили 	= ПолучитьХМЛ_ГруппыПоКодам(КодыГрупп);
	хмл_получили 	= ПолученныеДанные(хмл_отправили);
	хмл_получили 	= СтрЗаменить(хмл_получили,"waitForDistributor", "waitForOrders");
	
	результатРазбора = Разбор_ПолученныхГрупп(хмл_получили);
	Если результатРазбора.АвторизацияВыполнена и Интерактивно = Ложь Тогда
		кол = результатРазбора.deliveryGroups.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("СправочникСсылка.Коробки"));
		Обновить_ГруппыДоставки_ПоКодуДате(результатРазбора.deliveryGroups);
	Конецесли;	
	Возврат результатРазбора;
	
КонецФункции	

// Сформировать xml запрос Для указанныхЗаказов
//
// Параметры:
//   Парам - ТаблицаЗначений - поля:
//   Участник- СправочникСсылка.Участники - Участник заказа
//   Покупка - СправочникСсылка.Покупки, СправочникСсылка.Заказы , СправочникСсылка.Пристрой Покупка заказа
// Возвращаемое значение: - Строка  
Функция ПолучитьХМЛ_ГруппыПоКодам(КодыГрупп) 
	Тип_deliveryGroups	= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroups");
	Тип_distributors	= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroups=ФабрикаXDTO.Создать(Тип_deliveryGroups);
	Для каждого стр из КодыГрупп Цикл
		Если ТипЗнч(стр.Значение) = Тип("СправочникСсылка.Коробки") Тогда
			кодГруппы = стр.Значение.Код;
		Иначе	
			кодГруппы = стр.Значение;
		КонецЕсли;	
		код = число(СтрЗаменить(кодГруппы,"гд_",""));
	    Объект_deliveryGroups.deliveryGroup.Добавить(Формат(код,"ЧГ=0"));
	КонецЦикла;
	Объект_distributors					= ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.deliveryGroups	= Объект_deliveryGroups;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

Функция Разбор_ПолученныхГрупп(ПолученныеДанные) 
	ПолученныеДанные 		= СтрЗаменить(ПолученныеДанные,"uid=""""","uid=""0""");
	ПолученныеДанные 		= СтрЗаменить(ПолученныеДанные,"<firstPid></firstPid>","<firstPid>0</firstPid>");

	стр_Результат			= Новый Структура;

	пространствоИмен		= "http://www.100sp.ru/api/distributor/upload/back";
	авторизацияВыполнена	= ложь;
	Тип_distributors		= ФабрикаXDTO.Тип(пространствоИмен, "distributors");
		
	ПолученныеДанные		= СтрЗаменить(ПолученныеДанные, "http://www.100sp.ru","http://www.100sp.ru/api/distributor/upload/back");
	ЧтениеXML 				= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors		= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result	= "ok" Тогда
		авторизацияВыполнена	= истина;
	КонецЕсли;
	                                                                                      
	Если Объект_distributors.deliveryGroups						<> Неопределено Тогда
		ТЗ	= СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.deliveryGroups.deliveryGroup);
		стр_Результат.Вставить("deliveryGroups",ТЗ);
	ИначеЕсли Объект_distributors.dataByDates.deliveryGroups	<> Неопределено Тогда
		ТЗ	= СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.dataByDates.deliveryGroups.deliveryGroup);
		стр_Результат.Вставить("deliveryGroups",ТЗ);
	КонецЕсли;

	стр_Результат.Вставить("авторизацияВыполнена",авторизацияВыполнена);
	Возврат стр_Результат;

КонецФункции

#КонецОбласти



Процедура Обновить_ГруппыДоставки_ПоКодуДате(тзГрупп) 
	Ошибки		= Неопределено;
	Для каждого стр из тзГрупп Цикл
		Если стр.result="error" Тогда
			ТекстОшибки 	= "При получении с сайта группы Доставки  №"+стр.id+" возникли ошибка:";
			Если стр.message	<> "" Тогда
				ТекстОшибки	= ТекстОшибки + Символы.ПС + стр.message+";";
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,"",ТекстОшибки,);
			КонецЕсли
		Иначе	
			Если стр.recipient_code = "100"	 и Константы.КурьерскаяДоставка.Получить() Тогда //Курьерская доставка
				СП_КурьерскаяДоставка.ДокументКурьерскойДоставки_из_Api(стр);
			Иначе	// Доставка Транспортной Компанией

				КодКоробки	= "гд_" + Формат(Число(стр.id), "ЧЦ=11; ЧВН=; ЧГ=0");

				параметрыКоробки	= Новый Структура;
				параметрыКоробки.Вставить("ВидСтикера", Перечисления.ВидыСтикеров.ГруппаДоставки);
				параметрыКоробки.Вставить("СтатусГруппыДоставки", Перечисления.СтатусыГруппыДоставки[стр.status]);
				параметрыКоробки.Вставить("ТочкаСбора", СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(
					стр.distributor_code));
				параметрыКоробки.Вставить("ТочкаНазначения", ?(стр.recipient_code = "",
					Справочники.ТочкиРаздачи.ТочкаНеОпределена, СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(
					стр.recipient_code)));
				параметрыКоробки.Вставить("УчастникГД", СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(стр.uid));
				параметрыКоробки.Вставить("МинДатаДоставки", СтоСПОбмен_Общий.ДатаИзСтроки(стр.min_delivery_date));
				параметрыКоробки.Вставить("МаксДатаДоставки", СтоСПОбмен_Общий.ДатаИзСтроки(стр.max_delivery_date));
				параметрыКоробки.Вставить("СрокХраненияГруппы", стр.date_range_limit);
				параметрыКоробки.Вставить("ДатаЗагрузки", СтоСПОбмен_Общий.ДатаИзСтроки(стр.created_at));
				параметрыКоробки.Вставить("ДатаМодификации", СтоСПОбмен_Общий.ДатаИзСтроки(стр.updated_at));
				параметрыКоробки.Вставить("МетодОплаты", ?(стр.payment_method = "",
					Перечисления.МетодыОплаты.ПустаяСсылка(), Перечисления.МетодыОплаты[стр.payment_method]));
				параметрыКоробки.Вставить("ДатаЗагрузки", СтоСПОбмен_Общий.ДатаИзСтроки(стр.created_at));
				параметрыКоробки.Вставить("Состав", стр.orders);
				параметрыКоробки.Вставить("Догрузить", Ложь);

				стр.Ссылка	= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду(КодКоробки);
				СП_РаботаСоСправочниками.ОбновитьКоробку(стр.Ссылка, параметрыКоробки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
КонецПроцедуры	





#Область ЗапросТочкиСбораЗаказа
 
// Сформировать xml запрос Для указанныхЗаказов
//
// Параметры:
//   Парам - ТаблицаЗначений - поля:
//   Участник- СправочникСсылка.Участники - Участник заказа
//   Покупка - СправочникСсылка.Покупки, СправочникСсылка.Заказы , СправочникСсылка.Пристрой Покупка заказа
// Возвращаемое значение: - Строка  
Функция ПолучитьХМЛ_ЗапросТочкиСбора(ТЗЗаказов) 
	Тип_order					=ФабрикаXDTO.Тип("http://www.100sp.ru/out","order");
	Тип_deliveryGroupTransitCode=ФабрикаXDTO.Тип("http://www.100sp.ru/out","deliveryGroupTransitCode");
	Тип_distributors			=ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroupTransitCode=ФабрикаXDTO.Создать(Тип_deliveryGroupTransitCode);
	Для каждого стр из ТЗЗаказов Цикл
		Объект_order=ФабрикаXDTO.Создать(Тип_order);
		Если 	  ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Покупки") Тогда
			Объект_order.orderType="sp";	
			Объект_order.pid=стр.Покупка.Код;
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Заказы") Тогда
			Объект_order.orderType="shop";	
			Объект_order.orderId=стр.Покупка.Код;
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Пристрой") Тогда
			Объект_order.orderType="bulletin";	
			Объект_order.orderId=стр.Покупка.Код;
		ИначеЕсли ТипЗнч(стр.Покупка)=Тип("СправочникСсылка.Посылки") Тогда
			Объект_order.orderType="package";	
			Объект_order.packageId=стр.Покупка.Код;
		Иначе
			Продолжить;
		КонецЕсли;
		Объект_order.uid=стр.Участник.Код;
	    Объект_deliveryGroupTransitCode.order.Добавить(Объект_order);
	КонецЦикла;
	Объект_distributors=ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.deliveryGroupTransitCode=Объект_deliveryGroupTransitCode;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

Функция Разбор_ЗапросТочкиСбора(ТЗЗаказов,ПолученныеДанные) 
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	Тип_distributors=ФабрикаXDTO.Тип("http://www.100sp.ru", "distributors");
	Тип_deliveryGroupTransitCode=ФабрикаXDTO.Тип("http://www.100sp.ru", "deliveryGroupTransitCode");
	
	ТЗЗаказов.Колонки.Добавить("result");
	ТЗЗаказов.Колонки.Добавить("message");
	ТЗЗаказов.Колонки.Добавить("distributor_code");
	ТЗЗаказов.Колонки.Добавить("ПунктВыдачиНазначение", 	новый ОписаниеТипов("СправочникСсылка.ТочкиРаздачи"));
	ТЗЗаказов.Колонки.Добавить("ГабаритНазначение",			новый ОписаниеТипов("СправочникСсылка.Габариты"));
	ТЗЗаказов.Колонки.Добавить("МестоХраненияНазначение",	новый ОписаниеТипов("СправочникСсылка.МестаХранения"));
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.deliveryGroupTransitCode=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	Для каждого Заказ из Объект_distributors.deliveryGroupTransitCode.order Цикл
		Покупка  = СП_РаботаСоСправочниками.ПолучитьЗаказПоXDTO(Заказ, "orderType");
		Участник = СП_РаботаСоСправочниками.ПолучитьУчастникаПо_Коду(Заказ.uid);
		Если ТипЗнч(Покупка)= Тип("СправочникСсылка.Посылки") Тогда
			найденыСтроки=ТЗЗаказов.НайтиСтроки(новый Структура("Покупка",Покупка));
		Иначе	
			найденыСтроки=ТЗЗаказов.НайтиСтроки(новый Структура("Покупка, Участник",Покупка, Участник));
		Конецесли;	
		Для каждого стр из найденыСтроки Цикл
			стр.result           			= Заказ.result;
			стр.message          			= Заказ.message;
			стр.distributor_code 			= Заказ.distributor_code;
			Если стр.result="ok" или стр.result="ap" Тогда
				стр.ПунктВыдачиНазначение		= СП_РаботаСоСправочниками.ПолучитьПунктВыдачиПо_Коду(Заказ.distributor_code);
				стр.ГабаритНазначение           = стр.Габарит;
				стр.МестоХраненияНазначение     = стр.МестоХранения;
			КонецЕСли;
		КонецЦикла	
	КонецЦикла;
	Возврат авторизацияВыполнена;
КонецФункции


// Компанует Заказы по группам 
//
// Параметры:
//   Парам - ТаблицаЗначений - поля:
//   Участник- СправочникСсылка.Участники - Участник заказа
//   Покупка - СправочникСсылка.Покупки, СправочникСсылка.Заказы , СправочникСсылка.Пристрой Покупка заказа
// Возвращаемое значение: - Структура   - поля:
//   Автроизация 	- булево - Удалось ли подключиться к сайту
//   ЗаказыБезГрупп - ТаблицаЗначений
//   Ошибки			- ТаблицаЗначений
//   ЗаказыДругихТочек - ТаблицаЗначений
Функция Компановка_ЗапросТочкиСбора(ТЗЗаказов) 
	Если ТЗЗаказов.Колонки.Найти("result")=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось проверить заказы Других точек");
		Возврат новый Структура("Авторизация",Ложь);
	Конецесли;	
	
	отбор_ОдиночныеЗаказы=новый Структура("result,message","error","Заказ без группы доставки");
	ТЗ_ЗаказыБезГрупп=ТЗЗаказов.Скопировать(отбор_ОдиночныеЗаказы);
	строки_Кудалению=ТЗЗаказов.НайтиСтроки(отбор_ОдиночныеЗаказы);
	Для каждого стр из строки_Кудалению Цикл
		ТЗЗаказов.Удалить(стр);
	КонецЦикла;
	
	отбор_Ошибки=новый Структура("result","error");
	ТЗ_Ошибки=ТЗЗаказов.Скопировать(отбор_Ошибки);
	строки_Кудалению=ТЗЗаказов.НайтиСтроки(отбор_Ошибки);
	Для каждого стр из строки_Кудалению Цикл
		ТЗЗаказов.Удалить(стр);
	КонецЦикла;
	
	отбор_ЗаказыВСвоихГруппах=новый Структура("ПунктВыдачиНазначение",Константы.СвояТочка.Получить());
	ТЗ_ЗаказыВСвоихГруппах=ТЗЗаказов.Скопировать(отбор_ЗаказыВСвоихГруппах);
	строкиСвои=ТЗЗаказов.НайтиСтроки(отбор_ЗаказыВСвоихГруппах);
	Для каждого стр из строкиСвои Цикл
		ТЗЗаказов.Удалить(стр);
	КонецЦикла;	
	
	Возврат новый Структура("Авторизация,ЗаказыБезГрупп, Ошибки, ЗаказыДругихТочек,ЗаказыВСвоихГруппах",истина,ТЗ_ЗаказыБезГрупп,ТЗ_Ошибки,ТЗЗаказов,ТЗ_ЗаказыВСвоихГруппах);
КонецФункции


// Компанует Заказы на остатках Для ТК
//
// Возвращаемое значение: - Структура   - поля:
//   Автроизация 	- булево - Удалось ли подключиться к сайту
//   ЗаказыБезГрупп - ТаблицаЗначений
//   Ошибки			- ТаблицаЗначений
//   ЗаказыДругихТочек - ТаблицаЗначений
Функция ЗаказыДругихТочек_ПроверитьОстатки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Покупка КАК Покупка,
		|	ВложенныйЗапрос.Участник КАК Участник,
		|	ВложенныйЗапрос.Посылка КАК Посылка,
		|	КоробкиСостав.Ссылка КАК Коробка
		|ПОМЕСТИТЬ ПосылкиНаТранзитеТК
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыВПосылкахОстатки.Покупка КАК Покупка,
		|		ЗаказыВПосылкахОстатки.Участник КАК Участник,
		|		ЗаказыВПосылкахОстатки.Посылка КАК Посылка,
		|		ЗаказыВПосылкахОстатки.КодЗаказа КАК КодЗаказа
		|	ИЗ
		|		РегистрНакопления.ЗаказыВПосылках.Остатки(, ) КАК ЗаказыВПосылкахОстатки) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки.Состав КАК КоробкиСостав
		|		ПО ВложенныйЗапрос.Покупка = КоробкиСостав.Покупка
		|			И ВложенныйЗапрос.Участник = КоробкиСостав.Участник
		|			И (КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки))
		|			И ВложенныйЗапрос.КодЗаказа = КоробкиСостав.КодЗаказа
		|ГДЕ
		|	КоробкиСостав.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТранзитОстатки.Габарит КАК Габарит,
		|	ТранзитОстатки.Участник КАК Участник,
		|	ТранзитОстатки.МестоХранения КАК МестоХранения,
		|	ТранзитОстатки.Партия КАК Партия,
		|	ТранзитОстатки.ПокупкаСсылка КАК ПокупкаСсылка,
		|	ТранзитОстатки.Точка КАК Точка,
		|	ТранзитОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	КоробкиСостав.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Пред
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки(
		|			,
		|			Точка.ТранспортнаяКомпания
		|				И (ТИПЗНАЧЕНИЯ(ПокупкаСсылка) = ТИП(Справочник.Покупки)
		|					ИЛИ ТИПЗНАЧЕНИЯ(ПокупкаСсылка) = ТИП(Справочник.Заказы)
		|					ИЛИ ТИПЗНАЧЕНИЯ(ПокупкаСсылка) = ТИП(Справочник.Пристрой))) КАК ТранзитОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Коробки.Состав КАК КоробкиСостав
		|		ПО ТранзитОстатки.ПокупкаСсылка = КоробкиСостав.Покупка
		|			И ТранзитОстатки.Участник = КоробкиСостав.Участник
		|			И (КоробкиСостав.Ссылка.ВидСтикера = ЗНАЧЕНИЕ(Перечисление.ВидыСтикеров.ГруппаДоставки))
		|ГДЕ
		|	КоробкиСостав.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТранзитОстатки.Габарит,
		|	ТранзитОстатки.Участник,
		|	ТранзитОстатки.МестоХранения,
		|	ТранзитОстатки.Партия,
		|	ТранзитОстатки.ПокупкаСсылка,
		|	ТранзитОстатки.Точка,
		|	ТранзитОстатки.КоличествоОстаток,
		|	NULL
		|ИЗ
		|	РегистрНакопления.Транзит.Остатки(
		|			,
		|			Точка.ТранспортнаяКомпания
		|				И ПокупкаСсылка В
		|					(ВЫБРАТЬ
		|						ПосылкиНаТранзитеТК.Посылка КАК Посылка
		|					ИЗ
		|						ПосылкиНаТранзитеТК КАК ПосылкиНаТранзитеТК)) КАК ТранзитОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пред.Габарит КАК Габарит,
		|	Пред.Участник КАК Участник,
		|	Пред.МестоХранения КАК МестоХранения,
		|	Пред.Партия КАК Партия,
		|	Пред.ПокупкаСсылка КАК Покупка,
		|	Пред.Точка КАК ПунктВыдачи,
		|	Пред.КоличествоОстаток КАК Количество
		|ИЗ
		|	Пред КАК Пред
		|ГДЕ
		|	Пред.КоличествоОстаток > 0
		|	И ТИПЗНАЧЕНИЯ(Пред.ПокупкаСсылка) <> ТИП(Справочник.Заказы)";
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗ=РезультатЗапроса.Выгрузить();
	хмл_отправили=ПолучитьХМЛ_ЗапросТочкиСбора(ТЗ);
	хмл_получили =ПолученныеДанные(хмл_отправили);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	Разбор_ЗапросТочкиСбора(ТЗ,хмл_получили);
	Возврат Компановка_ЗапросТочкиСбора(ТЗ);
КонецФункции


// Компанует Заказы по группам 
//
// Параметры:
//   Парам - ТаблицаЗначений - поля:
//   Участник- СправочникСсылка.Участники - Участник заказа
//   Покупка - СправочникСсылка.Покупки, СправочникСсылка.Заказы , СправочникСсылка.Пристрой Покупка заказа
// Возвращаемое значение: - Структура   - поля:
//   Автроизация 	- булево - Удалось ли подключиться к сайту
//   ЗаказыБезГрупп - ТаблицаЗначений
//   Ошибки			- ТаблицаЗначений
//   ЗаказыДругихТочек - ТаблицаЗначений
Функция ЗаказыДругихТочек_ПроверитьЗаказы(Заказы) Экспорт
	хмл_отправили=ПолучитьХМЛ_ЗапросТочкиСбора(Заказы);
	хмл_получили =ПолученныеДанные(хмл_отправили);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	Разбор_ЗапросТочкиСбора(Заказы,хмл_получили);
	Возврат Компановка_ЗапросТочкиСбора(Заказы);
КонецФункции


#КонецОбласти



#Область ИсторияДоставки

Функция ПолучитьИсториюДоставки(группа) Экспорт

	код_группы		= Число(СтрЗаменить(группа.Код,"гд_",""));
	хмл_отправили	= ПолучитьХМЛ_ИсторияДоставки(код_группы);
	хмл_получили 	= ПолученныеДанные(хмл_отправили,Ложь);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	стр_Ответ=Новый структура;
	Разбор_ИсторияДоставки(стр_Ответ,хмл_получили);
	//найденые_Строки=ТЗ_Ответ.НайтиСтроки(новый Структура("delivery_group_id",код_группы));
	//Если найденые_Строки.Количество()=0 Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" не получен ответ при установке метода оплаты!");	
	//	Возврат ложь;
	//КонецЕсли;	
	//Если найденые_Строки[0].result="error" Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" при установке метода оплаты возникла ошибка : "+найденые_Строки[0].message);	
	//	Возврат ложь;
	//Конецесли;	
	//
	//КодыГрупп = новый СписокЗначений;
	//КодыГрупп.Добавить(группа);
	//Загрузить_ПоКодам(КодыГрупп);
	Возврат стр_Ответ.deliveryGroupsHistory;
КонецФункции	



Функция ПолучитьХМЛ_ИсторияДоставки(кодГруппы) 
	Тип_deliveryGroupsHistory	= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroupsHistory");
	Тип_distributors			= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroupsHistory = ФабрикаXDTO.Создать(Тип_deliveryGroupsHistory);
	
	Объект_deliveryGroupsHistory.deliveryGroupHistory.Добавить(кодГруппы);

	Объект_distributors=ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.deliveryGroupsHistory = Объект_deliveryGroupsHistory;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции



Функция Разбор_ИсторияДоставки(стр_Ответ,ПолученныеДанные) 
	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	
	Тип_distributors			 = ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	Тип_deliveryGroupsHistory	 = ФабрикаXDTO.Тип(пространствоИмен, "distributors.deliveryGroupsHistory");
	
	//ТЗ_Ответ.Колонки.Добавить("result");
	//ТЗ_Ответ.Колонки.Добавить("message");
	//ТЗ_Ответ.Колонки.Добавить("deliveryGroupsHistory");
	
	
	
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	
	
	//СтоСПОбмен_Общий.ТЗ_поСпискуXDTO(Объект_distributors.deliveryGroupsHistory.deliveryGroupHistory)
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.deliveryGroupsHistory=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	массивТиповОтветственный = новый Массив;
	массивТиповОтветственный.Добавить("СправочникСсылка.Участники");
	массивТиповОтветственный.Добавить("СправочникСсылка.ТочкиРаздачи");
	
	тзРезультат = новый ТаблицаЗначений;
	тзРезультат.Колонки.Добавить("ГруппаДоставки", 	новый ОписаниеТипов("СправочникСсылка.Коробки"));
	тзРезультат.Колонки.Добавить("Покупка", 		новый ОписаниеТипов("СправочникСсылка.Покупки"));
	тзРезультат.Колонки.Добавить("Участник", 		новый ОписаниеТипов("СправочникСсылка.Участники"));
	тзРезультат.Колонки.Добавить("КодЗаказа", 		новый ОписаниеТипов("Число"));
	тзРезультат.Колонки.Добавить("Ответственный",	новый ОписаниеТипов(массивТиповОтветственный));
	тзРезультат.Колонки.Добавить("ТипОперации",		новый ОписаниеТипов("Строка"));
	тзРезультат.Колонки.Добавить("Посылки",			новый ОписаниеТипов("Строка"));
	тзРезультат.Колонки.Добавить("Период",			новый ОписаниеТипов("Строка"));


	
	
	Для каждого группа из Объект_distributors.deliveryGroupsHistory.deliveryGroupHistory Цикл

		Для каждого элемИстории из группа.history.operation Цикл
			новаяСтрока = тзРезультат.Добавить();
			новаяСтрока.ГруппаДоставки 	= СП_РаботаСоСправочниками.ПолучитьКоробкуПо_Коду("гд_"+Формат(группа.id,"ЧЦ=11; ЧН=0; ЧВН=; ЧГ=0"));
			новаяСтрока.Покупка 		= Справочники[СтоСПОбмен_Общий.ПолучитьСправочник(элемИстории.orderType)].НайтиПоКоду(элемИстории.pid);
			новаяСтрока.Участник 		= Справочники["Участники"].НайтиПоКоду(элемИстории.uid);
			новаяСтрока.КодЗаказа 		= элемИстории.orderId;
			Если элемИстории.performerType = "distributor" тогда
				КодОтветственного = Формат(Число(элемИстории.performerId),"ЧЦ=4; ЧН=0; ЧВН=; ЧГ=0");
			иначе
				КодОтветственного = элемИстории.performerId;
			КонецЕсли;	
			новаяСтрока.Ответственный	= ?(КодОтветственного = Неопределено , "system", Справочники[СтоСПОбмен_Общий.ПолучитьСправочник(элемИстории.performerType)].НайтиПоКоду(КодОтветственного));
			новаяСтрока.Период			= элемИстории.operationDate;
			новаяСтрока.Посылки			= "";
			новаяСтрока.ТипОперации		= элемИстории.operationType;
			Если элемИстории.packages  <> неопределено Тогда
				Для каждого элемПосылки из элемИстории.packages.package Цикл
					новаяСтрока.Посылки 	= новаяСтрока.Посылки + Формат(элемПосылки,"ЧГ=0") + ", ";
				КонецЦикла;	
			КонецЕсли;
			новаяСтрока.Посылки 		= Лев(новаяСтрока.Посылки,СтрДлина(новаяСтрока.Посылки)-2);
		КонецЦикла;
	КонецЦикла;
	
	//строкаОтвета 						= ТЗ_Ответ.Добавить();
	//строкаОтвета.result 				= "ok";
	//строкаОтвета.deliveryGroupsHistory 	= тзРезультат;
	
	стр_Ответ.Вставить("result","ok");
	стр_Ответ.Вставить("deliveryGroupsHistory",тзРезультат);
	
	Возврат авторизацияВыполнена;
КонецФункции



#КонецОбласти

#Область УстановитьМетодОплатыНалПлатеж

Функция ПолучитьХМЛ_УстановитьНалПлатеж(код_группы) 
	Тип_group					=ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroupsSetCod.group");
	Тип_deliveryGroupsSetCod	=ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.deliveryGroupsSetCod");
	Тип_distributors			=ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	
	Объект_deliveryGroupsSetCod=ФабрикаXDTO.Создать(Тип_deliveryGroupsSetCod);
	
	Объект_group=ФабрикаXDTO.Создать(Тип_group);
	Объект_group.delivery_group_id=Число(код_группы);	
	
	Объект_deliveryGroupsSetCod.group.Добавить(Объект_group);
	
	
	Объект_distributors=ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.deliveryGroupsSetCod=Объект_deliveryGroupsSetCod;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

Функция Разбор_УстановитьНалПлатеж(ТЗ_Ответ,ПолученныеДанные) 
	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	
	Тип_distributors			 = ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	Тип_deliveryGroupsSetCod = ФабрикаXDTO.Тип(пространствоИмен, "distributors.deliveryGroupsSetCod");
	
	ТЗ_Ответ.Колонки.Добавить("result");
	ТЗ_Ответ.Колонки.Добавить("message");
	ТЗ_Ответ.Колонки.Добавить("delivery_group_id");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.deliveryGroupsSetCod=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	Для каждого группа из Объект_distributors.deliveryGroupsSetCod.group Цикл
		стр_ответа=ТЗ_Ответ.Добавить();
		ЗаполнитьЗначенияСвойств(стр_ответа,группа);
	КонецЦикла;
	Возврат авторизацияВыполнена;
КонецФункции

Функция УстановитьНаложенныйПлатеж(группа) Экспорт

	код_группы=Число(СтрЗаменить(группа.Код,"гд_",""));
	хмл_отправили=ПолучитьХМЛ_УстановитьНалПлатеж(код_группы);
	хмл_получили =ПолученныеДанные(хмл_отправили,Истина);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	ТЗ_Ответ=Новый ТаблицаЗначений;
	Разбор_УстановитьНалПлатеж(ТЗ_Ответ,хмл_получили);
	найденые_Строки=ТЗ_Ответ.НайтиСтроки(новый Структура("delivery_group_id",код_группы));
	Если найденые_Строки.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" не получен ответ при установке метода оплаты!");	
		Возврат ложь;
	КонецЕсли;	
	Если найденые_Строки[0].result="error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" при установке метода оплаты возникла ошибка : "+найденые_Строки[0].message);	
		Возврат ложь;
	Конецесли;	
	
	КодыГрупп = новый СписокЗначений;
	КодыГрупп.Добавить(группа);
	Загрузить_ПоКодам(КодыГрупп);
	Возврат Истина;
КонецФункции	

#КонецОбласти


#Область ИзменитьАдресГруппыДоставки

Функция ПолучитьХМЛ_ИзменитьАдресГруппыДоставки(код_группы) 
	Тип_group						= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.groupsWaitDistributor.group");
	Тип_groupsWaitDistributor		= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors.groupsWaitDistributor");
	Тип_distributors				= ФабрикаXDTO.Тип("http://www.100sp.ru/out","distributors");
	                            	
	Объект_groupsWaitDistributor	= ФабрикаXDTO.Создать(Тип_groupsWaitDistributor);
	
	Объект_group					= ФабрикаXDTO.Создать(Тип_group);
	Объект_group.delivery_group_id	= Число(код_группы);	
	
	Объект_groupsWaitDistributor.group.Добавить(Объект_group);
	
	
	Объект_distributors=ФабрикаXDTO.Создать(Тип_distributors);
	Объект_distributors.groupsWaitDistributor	= Объект_groupsWaitDistributor;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(); 
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект_distributors);
	ДанныеXML = Запись.Закрыть();
	ДанныеXML="<?xml version=""1.0"" encoding=""UTF-8""?> "+СтрЗаменить(ДанныеXML,"xmlns=""http://www.100sp.ru/out"" ","");
	Возврат ДанныеXML; 
КонецФункции

Функция Разбор_ИзменитьАдресГруппыДоставки(ТЗ_Ответ,ПолученныеДанные) 
	пространствоИмен="http://www.100sp.ru/api/distributor/upload/back";
	ПолученныеДанные=СтрЗаменить(ПолученныеДанные,"http://www.100sp.ru",пространствоИмен);
	
	авторизацияВыполнена=ложь;
	Если ПолученныеДанные = "Не удалось соеденится с сайтом" Тогда Возврат авторизацияВыполнена; КонецЕсли;
	
	Тип_distributors			 = ФабрикаXDTO.Тип(пространствоИмен, "distributors");
	Тип_groupsWaitDistributor	 = ФабрикаXDTO.Тип(пространствоИмен, "distributors.groupsWaitDistributor");
	
	ТЗ_Ответ.Колонки.Добавить("result");
	ТЗ_Ответ.Колонки.Добавить("message");
	ТЗ_Ответ.Колонки.Добавить("delivery_group_id");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолученныеДанные);
	
	Объект_distributors= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,Тип_distributors);
	Если Объект_distributors.auth.result="ok" Тогда
		авторизацияВыполнена=истина;
	КонецЕсли;
	Если Объект_distributors.groupsWaitDistributor=Неопределено Тогда
		Возврат авторизацияВыполнена;
	КонецЕсли;	
	
	Для каждого группа из Объект_distributors.groupsWaitDistributor.group Цикл
		стр_ответа=ТЗ_Ответ.Добавить();
		ЗаполнитьЗначенияСвойств(стр_ответа,группа);
	КонецЦикла;
	Возврат авторизацияВыполнена;
КонецФункции

Функция ИзменитьАдресГруппыДоставки(группа) Экспорт

	код_группы=Число(СтрЗаменить(группа.Код,"гд_",""));
	хмл_отправили=ПолучитьХМЛ_ИзменитьАдресГруппыДоставки(код_группы);
	хмл_получили =ПолученныеДанные(хмл_отправили,Истина);
	//Если хмл_получили= "Не удалось соеденится с сайтом" Тогда Возврат КонецЕсли;
	ТЗ_Ответ=Новый ТаблицаЗначений;
	Разбор_ИзменитьАдресГруппыДоставки(ТЗ_Ответ,хмл_получили);
	найденые_Строки=ТЗ_Ответ.НайтиСтроки(новый Структура("delivery_group_id",код_группы));
	Если найденые_Строки.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" не получен ответ при установке метода оплаты!");	
		Возврат ложь;
	КонецЕсли;	
	Если найденые_Строки[0].result="error" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" при установке статуса ""смена адреса"" возникла ошибка : "+найденые_Строки[0].message);	
		Возврат ложь;
	Конецесли;	
	
	Если найденые_Строки[0].result="ok" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для группы с кодом "+код_группы+" запрос на смену адреса отправлен");	
	Конецесли;	
	
	
	КодыГрупп = новый СписокЗначений;
	КодыГрупп.Добавить(группа);
	Загрузить_ПоКодам(КодыГрупп);
	Возврат Истина;
КонецФункции	

#КонецОбласти





#Область ЗапросМетодаОплаты_Удаление_Исключение



Функция ВыгрузитьИзмененияНаСайт() Экспорт
	ДокЗапрос	= Документы.ЗапросыГруппДоставки.СоздатьДокумент();
	СписокГрупп = ДокЗапрос.ВыполнитьОбмен();
	Попытка
		ДокЗапрос.Записать(РежимЗаписиДокумента.Проведение);
		Возврат СписокГрупп;
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
КонецФункции

Функция ВернутьГруппеСтатусЗапросОплаты(Группа) Экспорт
	ДокЗапрос=Документы.ЗапросыГруппДоставки.СоздатьДокумент();
	СписокГрупп = ДокЗапрос.ВыполнитьОбмен_ВернутьЗапросОплаты(Группа);
	Попытка
		ДокЗапрос.Записать(РежимЗаписиДокумента.Проведение);
		Возврат СписокГрупп;
	Исключение
		Возврат Неопределено;	
	КонецПопытки;
КонецФункции

#КонецОбласти


Функция 	ПолученныеДанные(ДанныеXML,Выгрузка=Ложь) 
	Параметры    = новый Структура;
	Параметры.Вставить("token",Константы.Токен.Получить());
	Параметры.Вставить("xml", ДанныеXML);
	Если Выгрузка Тогда
		АдресСкрипта = Константы.АдресВыгрузкиНасайт.Получить();
	Иначе	
		АдресСкрипта = Константы.АдресЗагрузкиССайта.Получить();
	КОнецЕсли;	

	ПолученныйФайл		= СтоСПОбмен_Общий.ПолучитьПостЗапросом(Параметры,АдресСкрипта);
	Если ПолученныйФайл	= Неопределено Тогда Возврат "Не удалось соеденится с сайтом"; КонецЕсли; 
	ПолученныеДанные	= СтоСПОбмен_Общий.ФайлВСтроку(ПолученныйФайл);
	Возврат ПолученныеДанные;
КонецФункции

Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	Если ИмяПараметра = "ЗапуститьУчетГруппДоставки" Тогда
		ПараметрыСеанса.ЗапуститьУчетГруппДоставки = Ложь;
		УстановленныеПараметры.Добавить("ЗапуститьУчетГруппДоставки");
	КонецЕсли;
КонецПроцедуры





